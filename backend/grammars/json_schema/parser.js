module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Dialect: peg$parseDialect },
        peg$startRuleFunction  = peg$parseDialect,

        peg$c0 = function(schema) {return {schema, subschemas, pn_refs: propertyNames_refs}},
        peg$c1 = "[",
        peg$c2 = peg$literalExpectation("[", false),
        peg$c3 = function() {depth[depth.length-1]++},
        peg$c4 = "{",
        peg$c5 = peg$literalExpectation("{", false),
        peg$c6 = "]",
        peg$c7 = peg$literalExpectation("]", false),
        peg$c8 = function() {depth[depth.length-1]--},
        peg$c9 = "}",
        peg$c10 = peg$literalExpectation("}", false),
        peg$c11 = ":",
        peg$c12 = peg$literalExpectation(":", false),
        peg$c13 = ",",
        peg$c14 = peg$literalExpectation(",", false),
        peg$c15 = peg$otherExpectation("whitespace"),
        peg$c16 = /^[ \t\n\r]/,
        peg$c17 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        peg$c18 = "false",
        peg$c19 = peg$literalExpectation("false", false),
        peg$c20 = function() { return false; },
        peg$c21 = "null",
        peg$c22 = peg$literalExpectation("null", false),
        peg$c23 = function() { return null;  },
        peg$c24 = "true",
        peg$c25 = peg$literalExpectation("true", false),
        peg$c26 = function() { return true;  },
        peg$c27 = "type",
        peg$c28 = peg$literalExpectation("type", false),
        peg$c29 = function(key, value) {return {key, value}},
        peg$c30 = function(t) {return [t]},
        peg$c31 = function(arr) {return arr},
        peg$c32 = "string",
        peg$c33 = peg$literalExpectation("string", false),
        peg$c34 = "number",
        peg$c35 = peg$literalExpectation("number", false),
        peg$c36 = "integer",
        peg$c37 = peg$literalExpectation("integer", false),
        peg$c38 = "object",
        peg$c39 = peg$literalExpectation("object", false),
        peg$c40 = "array",
        peg$c41 = peg$literalExpectation("array", false),
        peg$c42 = "boolean",
        peg$c43 = peg$literalExpectation("boolean", false),
        peg$c44 = function(v) {return v},
        peg$c45 = "enum",
        peg$c46 = peg$literalExpectation("enum", false),
        peg$c47 = "const",
        peg$c48 = peg$literalExpectation("const", false),
        peg$c49 = "default",
        peg$c50 = peg$literalExpectation("default", false),
        peg$c51 = function() {return null},
        peg$c52 = "title",
        peg$c53 = peg$literalExpectation("title", false),
        peg$c54 = "description",
        peg$c55 = peg$literalExpectation("description", false),
        peg$c56 = "$comment",
        peg$c57 = peg$literalExpectation("$comment", false),
        peg$c58 = "examples",
        peg$c59 = peg$literalExpectation("examples", false),
        peg$c60 = "readOnly",
        peg$c61 = peg$literalExpectation("readOnly", false),
        peg$c62 = "writeOnly",
        peg$c63 = peg$literalExpectation("writeOnly", false),
        peg$c64 = "deprecated",
        peg$c65 = peg$literalExpectation("deprecated", false),
        peg$c66 = "minLength",
        peg$c67 = peg$literalExpectation("minLength", false),
        peg$c68 = "maxLength",
        peg$c69 = peg$literalExpectation("maxLength", false),
        peg$c70 = "pattern",
        peg$c71 = peg$literalExpectation("pattern", false),
        peg$c72 = "format",
        peg$c73 = peg$literalExpectation("format", false),
        peg$c74 = "date-time",
        peg$c75 = peg$literalExpectation("date-time", false),
        peg$c76 = "time",
        peg$c77 = peg$literalExpectation("time", false),
        peg$c78 = "date",
        peg$c79 = peg$literalExpectation("date", false),
        peg$c80 = "duration",
        peg$c81 = peg$literalExpectation("duration", false),
        peg$c82 = "email",
        peg$c83 = peg$literalExpectation("email", false),
        peg$c84 = "idn-email",
        peg$c85 = peg$literalExpectation("idn-email", false),
        peg$c86 = "hostname",
        peg$c87 = peg$literalExpectation("hostname", false),
        peg$c88 = "idn-hostname",
        peg$c89 = peg$literalExpectation("idn-hostname", false),
        peg$c90 = "ipv4",
        peg$c91 = peg$literalExpectation("ipv4", false),
        peg$c92 = "ipv6",
        peg$c93 = peg$literalExpectation("ipv6", false),
        peg$c94 = "uuid",
        peg$c95 = peg$literalExpectation("uuid", false),
        peg$c96 = "uri-reference",
        peg$c97 = peg$literalExpectation("uri-reference", false),
        peg$c98 = "uri-template",
        peg$c99 = peg$literalExpectation("uri-template", false),
        peg$c100 = "uri",
        peg$c101 = peg$literalExpectation("uri", false),
        peg$c102 = "iri-reference",
        peg$c103 = peg$literalExpectation("iri-reference", false),
        peg$c104 = "iri",
        peg$c105 = peg$literalExpectation("iri", false),
        peg$c106 = "json-pointer",
        peg$c107 = peg$literalExpectation("json-pointer", false),
        peg$c108 = "relative-json-pointer",
        peg$c109 = peg$literalExpectation("relative-json-pointer", false),
        peg$c110 = "regex",
        peg$c111 = peg$literalExpectation("regex", false),
        peg$c112 = function(f) {return f},
        peg$c113 = "multipleOf",
        peg$c114 = peg$literalExpectation("multipleOf", false),
        peg$c115 = function(key, value) {return {key, value: [value]}},
        peg$c116 = "minimum",
        peg$c117 = peg$literalExpectation("minimum", false),
        peg$c118 = "exclusiveMinimum",
        peg$c119 = peg$literalExpectation("exclusiveMinimum", false),
        peg$c120 = "maximum",
        peg$c121 = peg$literalExpectation("maximum", false),
        peg$c122 = "exclusiveMaximum",
        peg$c123 = peg$literalExpectation("exclusiveMaximum", false),
        peg$c124 = "patternProperties",
        peg$c125 = peg$literalExpectation("patternProperties", false),
        peg$c126 = "properties",
        peg$c127 = peg$literalExpectation("properties", false),
        peg$c128 = "additionalProperties",
        peg$c129 = peg$literalExpectation("additionalProperties", false),
        peg$c130 = "unevaluatedProperties",
        peg$c131 = peg$literalExpectation("unevaluatedProperties", false),
        peg$c132 = "required",
        peg$c133 = peg$literalExpectation("required", false),
        peg$c134 = "propertyNames",
        peg$c135 = peg$literalExpectation("propertyNames", false),
        peg$c136 = function() {current_key = "propertyNames"},
        peg$c137 = function(key, value) {return checkPropertyNamesType(value)},
        peg$c138 = function(key, value) {current_key = ""; return {key, value: typeof value == "boolean" ? {type: {def: true, string: {}}} : value}},
        peg$c139 = "minProperties",
        peg$c140 = peg$literalExpectation("minProperties", false),
        peg$c141 = "maxProperties",
        peg$c142 = peg$literalExpectation("maxProperties", false),
        peg$c143 = "items",
        peg$c144 = peg$literalExpectation("items", false),
        peg$c145 = "prefixItems",
        peg$c146 = peg$literalExpectation("prefixItems", false),
        peg$c147 = "unevaluatedItems",
        peg$c148 = peg$literalExpectation("unevaluatedItems", false),
        peg$c149 = "contains",
        peg$c150 = peg$literalExpectation("contains", false),
        peg$c151 = "minContains",
        peg$c152 = peg$literalExpectation("minContains", false),
        peg$c153 = "maxContains",
        peg$c154 = peg$literalExpectation("maxContains", false),
        peg$c155 = "minItems",
        peg$c156 = peg$literalExpectation("minItems", false),
        peg$c157 = "maxItems",
        peg$c158 = peg$literalExpectation("maxItems", false),
        peg$c159 = "uniqueItems",
        peg$c160 = peg$literalExpectation("uniqueItems", false),
        peg$c161 = "contentMediaType",
        peg$c162 = peg$literalExpectation("contentMediaType", false),
        peg$c163 = "",
        peg$c164 = "contentEncoding",
        peg$c165 = peg$literalExpectation("contentEncoding", false),
        peg$c166 = "7bit",
        peg$c167 = peg$literalExpectation("7bit", false),
        peg$c168 = "8bit",
        peg$c169 = peg$literalExpectation("8bit", false),
        peg$c170 = "binary",
        peg$c171 = peg$literalExpectation("binary", false),
        peg$c172 = "quoted-printable",
        peg$c173 = peg$literalExpectation("quoted-printable", false),
        peg$c174 = "base16",
        peg$c175 = peg$literalExpectation("base16", false),
        peg$c176 = "base32",
        peg$c177 = peg$literalExpectation("base32", false),
        peg$c178 = "base64",
        peg$c179 = peg$literalExpectation("base64", false),
        peg$c180 = function(e) {return e},
        peg$c181 = "contentSchema",
        peg$c182 = peg$literalExpectation("contentSchema", false),
        peg$c183 = "allOf",
        peg$c184 = peg$literalExpectation("allOf", false),
        peg$c185 = "anyOf",
        peg$c186 = peg$literalExpectation("anyOf", false),
        peg$c187 = "oneOf",
        peg$c188 = peg$literalExpectation("oneOf", false),
        peg$c189 = function(key, value) {return checkCompositionTypes(key, value)},
        peg$c190 = "not",
        peg$c191 = peg$literalExpectation("not", false),
        peg$c192 = "dependentRequired",
        peg$c193 = peg$literalExpectation("dependentRequired", false),
        peg$c194 = "dependentSchemas",
        peg$c195 = peg$literalExpectation("dependentSchemas", false),
        peg$c196 = "if",
        peg$c197 = peg$literalExpectation("if", false),
        peg$c198 = "then",
        peg$c199 = peg$literalExpectation("then", false),
        peg$c200 = "else",
        peg$c201 = peg$literalExpectation("else", false),
        peg$c202 = function(k) {current_key = k},
        peg$c203 = function(key, value) {current_key = ""; return {key, value}},
        peg$c204 = "$schema",
        peg$c205 = peg$literalExpectation("$schema", false),
        peg$c206 = function(key, value) {return atRoot(key)},
        peg$c207 = function(key, value) {return null},
        peg$c208 = "http://json-schema.org/draft-0",
        peg$c209 = peg$literalExpectation("http://json-schema.org/draft-0", false),
        peg$c210 = /^[467]/,
        peg$c211 = peg$classExpectation(["4", "6", "7"], false, false),
        peg$c212 = "/schema#",
        peg$c213 = peg$literalExpectation("/schema#", false),
        peg$c214 = "https://json-schema.org/draft/20",
        peg$c215 = peg$literalExpectation("https://json-schema.org/draft/20", false),
        peg$c216 = "19-09",
        peg$c217 = peg$literalExpectation("19-09", false),
        peg$c218 = "20-12",
        peg$c219 = peg$literalExpectation("20-12", false),
        peg$c220 = "/schema",
        peg$c221 = peg$literalExpectation("/schema", false),
        peg$c222 = function(v) {return v == "https://json-schema.org/draft/2020-12/schema" ? true : error("Esta ferramenta implementa apenas a sintaxe do draft 2020-12!")},
        peg$c223 = "$id",
        peg$c224 = peg$literalExpectation("$id", false),
        peg$c225 = function(key, value) {return atRoot(key) && newId(value)},
        peg$c226 = function(key, value) {ids.push(value); return {key, value}},
        peg$c227 = "$anchor",
        peg$c228 = peg$literalExpectation("$anchor", false),
        peg$c229 = "$ref",
        peg$c230 = peg$literalExpectation("$ref", false),
        peg$c231 = "$defs",
        peg$c232 = peg$literalExpectation("$defs", false),
        peg$c233 = function() { return structureSchemaData(null) },
        peg$c234 = function() {depth.push(0); refs.push([]); anchors.push({})},
        peg$c235 = function(head, m) { return m; },
        peg$c236 = function(head, tail) {
                var result = {};
                [head].concat(tail).forEach(el => {if (el !== null) result[el.key] = el.value});
                return result;
            },
        peg$c237 = function(members) {depth.pop()},
        peg$c238 = function(members) { return checkSchema(members) },
        peg$c239 = function(members) { 
              let schema = structureSchemaData(members)

              if ("$ref" in schema) refs[refs.length-1].push(schema)
              if ("$anchor" in schema) {
                let anchor_name = schema.$anchor
                delete schema.$anchor
                anchors[anchors.length-1][anchor_name] = schema
              }

              let new_refs = refs.pop()
              let new_anchors = anchors.pop()

              // guardar subschema se tiver um id ou se for a própria schema
              if ("$id" in schema || !refs.length) {
                let id = "$id" in schema ? schema.$id : ("anon" + ++anon_schemas)
                if ("$id" in schema) delete schema.$id
                subschemas.push({id, schema, refs: new_refs, anchors: new_anchors})
              }
              else {
                refs.push(refs.pop().concat(new_refs))
                Object.assign(anchors[anchors.length-1], new_anchors)
              }
              
              return schema
            },
        peg$c240 = function(head, tail) {
                var result = {};
                [head].concat(tail).forEach(el => {result[el.name] = el.value});
                return result;
            },
        peg$c241 = function(members) { return members !== null ? members: {}; },
        peg$c242 = function(name, value) {return {name, value}},
        peg$c243 = peg$otherExpectation("array"),
        peg$c244 = function(head, v) { return v; },
        peg$c245 = function(head, tail) { return [head].concat(tail); },
        peg$c246 = function(values) { return values !== null ? values : []; },
        peg$c247 = peg$otherExpectation("array of strings"),
        peg$c248 = peg$otherExpectation("array of schemas"),
        peg$c249 = peg$otherExpectation("array of JSON types"),
        peg$c250 = function(head, tail) { return tail.includes(head) ? error("Os elementos do array 'type' devem ser todos únicos!") : [head].concat(tail); },
        peg$c251 = function(values) { return values !== null ? values : error("O array de tipos não pode ser vazio!"); },
        peg$c252 = peg$otherExpectation("number"),
        peg$c253 = "-",
        peg$c254 = peg$literalExpectation("-", false),
        peg$c255 = function() { return parseFloat(text()); },
        peg$c256 = peg$otherExpectation("positive number"),
        peg$c257 = /^[eE]/,
        peg$c258 = peg$classExpectation(["e", "E"], false, false),
        peg$c259 = "+",
        peg$c260 = peg$literalExpectation("+", false),
        peg$c261 = /^[0-9]/,
        peg$c262 = peg$classExpectation([["0", "9"]], false, false),
        peg$c263 = ".",
        peg$c264 = peg$literalExpectation(".", false),
        peg$c265 = peg$otherExpectation("integer"),
        peg$c266 = "0",
        peg$c267 = peg$literalExpectation("0", false),
        peg$c268 = /^[1-9]/,
        peg$c269 = peg$classExpectation([["1", "9"]], false, false),
        peg$c270 = function(i) {return i},
        peg$c271 = function(integer) {return parseInt(Array.isArray(integer) ? integer.flat().join("") : integer)},
        peg$c272 = peg$otherExpectation("string"),
        peg$c273 = function(chars) {return chars.join("")},
        peg$c274 = peg$otherExpectation("anchor"),
        peg$c275 = function(value) {return value},
        peg$c276 = "https://datagen.di.uminho.pt",
        peg$c277 = peg$literalExpectation("https://datagen.di.uminho.pt", false),
        peg$c278 = "/json-schemas",
        peg$c279 = peg$literalExpectation("/json-schemas", false),
        peg$c280 = "/",
        peg$c281 = peg$literalExpectation("/", false),
        peg$c282 = /^[^\/"]/,
        peg$c283 = peg$classExpectation(["/", "\""], true, false),
        peg$c284 = function(id) {return id},
        peg$c285 = peg$otherExpectation("$ref"),
        peg$c286 = "#",
        peg$c287 = peg$literalExpectation("#", false),
        peg$c288 = "/json-schemas/",
        peg$c289 = peg$literalExpectation("/json-schemas/", false),
        peg$c290 = function(ref) {if (current_key == "propertyNames") propertyNames_refs.push(ref); return ref},
        peg$c291 = /^[a-zA-Z]/,
        peg$c292 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c293 = /^[a-zA-Z0-9\-_:.]/,
        peg$c294 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_", ":", "."], false, false),
        peg$c295 = /^[^\/#"]/,
        peg$c296 = peg$classExpectation(["/", "#", "\""], true, false),
        peg$c297 = "\"",
        peg$c298 = peg$literalExpectation("\"", false),
        peg$c299 = "\\",
        peg$c300 = peg$literalExpectation("\\", false),
        peg$c301 = "b",
        peg$c302 = peg$literalExpectation("b", false),
        peg$c303 = function() { return "\b"; },
        peg$c304 = "f",
        peg$c305 = peg$literalExpectation("f", false),
        peg$c306 = function() { return "\f"; },
        peg$c307 = "n",
        peg$c308 = peg$literalExpectation("n", false),
        peg$c309 = function() { return "\n"; },
        peg$c310 = "r",
        peg$c311 = peg$literalExpectation("r", false),
        peg$c312 = function() { return "\r"; },
        peg$c313 = "t",
        peg$c314 = peg$literalExpectation("t", false),
        peg$c315 = function() { return "\t"; },
        peg$c316 = "u",
        peg$c317 = peg$literalExpectation("u", false),
        peg$c318 = function(digits) {
                  return String.fromCharCode(parseInt(digits, 16));
                },
        peg$c319 = function(sequence) { return sequence; },
        peg$c320 = /^[^\0-\x1F"\\]/,
        peg$c321 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false),
        peg$c322 = /^[0-9a-f]/i,
        peg$c323 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseDialect() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseschema_object();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebegin_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c1;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c2); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebegin_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c4;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c9;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsename_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c11;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalue_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c16.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c16.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0;

      s0 = peg$parseboolean();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenull();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobject();
          if (s0 === peg$FAILED) {
            s0 = peg$parsearray();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenumber();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestring();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseboolean() {
      var s0;

      s0 = peg$parsefalse();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetrue();
      }

      return s0;
    }

    function peg$parsefalse() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c23();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetrue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekeyword() {
      var s0;

      s0 = peg$parsegeneric_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring_keyword();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenumber_keyword();
          if (s0 === peg$FAILED) {
            s0 = peg$parseobject_keyword();
            if (s0 === peg$FAILED) {
              s0 = peg$parsearray_keyword();
              if (s0 === peg$FAILED) {
                s0 = peg$parsemedia_keyword();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseschemaComposition_keyword();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseconditionalSubschemas_keyword();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsestructuring_keyword();
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegeneric_keyword() {
      var s0;

      s0 = peg$parsekw_type();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_enum();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_const();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_default();
            if (s0 === peg$FAILED) {
              s0 = peg$parseannotation_keyword();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekw_type() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c27) {
          s2 = peg$c27;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetype_value();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetype_value() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetype();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c30(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetype_array();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetype() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c32) {
          s3 = peg$c32;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c34) {
            s3 = peg$c34;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c36) {
              s3 = peg$c36;
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c38) {
                s3 = peg$c38;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c40) {
                  s3 = peg$c40;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c42) {
                    s3 = peg$c42;
                    peg$currPos += 7;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c43); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c21) {
                      s3 = peg$c21;
                      peg$currPos += 4;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c44(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_enum() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c45) {
          s2 = peg$c45;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsearray();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_const() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c47) {
          s2 = peg$c47;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevalue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_default() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c49) {
          s2 = peg$c49;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevalue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseannotation_keyword() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekws_annotation_stringValues();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekw_examples();
        if (s1 === peg$FAILED) {
          s1 = peg$parsekws_annotation_booleanValues();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekws_annotation_stringValues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c52) {
          s3 = peg$c52;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c54) {
            s3 = peg$c54;
            peg$currPos += 11;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c56) {
              s3 = peg$c56;
              peg$currPos += 8;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c57); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_examples() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c58) {
          s2 = peg$c58;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsearray();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_annotation_booleanValues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c60) {
          s3 = peg$c60;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c62) {
            s3 = peg$c62;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c64) {
              s3 = peg$c64;
              peg$currPos += 10;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseboolean();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestring_keyword() {
      var s0;

      s0 = peg$parsekws_string_length();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_pattern();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_format();
        }
      }

      return s0;
    }

    function peg$parsekws_string_length() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c66) {
          s3 = peg$c66;
          peg$currPos += 9;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c68) {
            s3 = peg$c68;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_pattern() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c70) {
          s2 = peg$c70;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_format() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c72) {
          s2 = peg$c72;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseformat_value();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseformat_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c74) {
          s2 = peg$c74;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c76) {
            s2 = peg$c76;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c78) {
              s2 = peg$c78;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c80) {
                s2 = peg$c80;
                peg$currPos += 8;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c81); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c82) {
                  s2 = peg$c82;
                  peg$currPos += 5;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c84) {
                    s2 = peg$c84;
                    peg$currPos += 9;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c85); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c86) {
                      s2 = peg$c86;
                      peg$currPos += 8;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c87); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 12) === peg$c88) {
                        s2 = peg$c88;
                        peg$currPos += 12;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c89); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c90) {
                          s2 = peg$c90;
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c91); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c92) {
                            s2 = peg$c92;
                            peg$currPos += 4;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c93); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c94) {
                              s2 = peg$c94;
                              peg$currPos += 4;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c95); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 13) === peg$c96) {
                                s2 = peg$c96;
                                peg$currPos += 13;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c97); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 12) === peg$c98) {
                                  s2 = peg$c98;
                                  peg$currPos += 12;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c99); }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3) === peg$c100) {
                                    s2 = peg$c100;
                                    peg$currPos += 3;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c101); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 13) === peg$c102) {
                                      s2 = peg$c102;
                                      peg$currPos += 13;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c104) {
                                        s2 = peg$c104;
                                        peg$currPos += 3;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                      }
                                      if (s2 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 12) === peg$c106) {
                                          s2 = peg$c106;
                                          peg$currPos += 12;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                        }
                                        if (s2 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 21) === peg$c108) {
                                            s2 = peg$c108;
                                            peg$currPos += 21;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                          }
                                          if (s2 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c110) {
                                              s2 = peg$c110;
                                              peg$currPos += 5;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c112(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber_keyword() {
      var s0;

      s0 = peg$parsekw_multipleOf();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekws_range();
      }

      return s0;
    }

    function peg$parsekw_multipleOf() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c113) {
          s2 = peg$c113;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c114); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepositiveNumber();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c115(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_range() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c116) {
          s3 = peg$c116;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c117); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 16) === peg$c118) {
            s3 = peg$c118;
            peg$currPos += 16;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c119); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c120) {
              s3 = peg$c120;
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 16) === peg$c122) {
                s3 = peg$c122;
                peg$currPos += 16;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c123); }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseobject_keyword() {
      var s0;

      s0 = peg$parsekws_props();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_moreProps();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_requiredProps();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_propertyNames();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekws_size();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekws_props() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 17) === peg$c124) {
          s3 = peg$c124;
          peg$currPos += 17;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c126) {
            s3 = peg$c126;
            peg$currPos += 10;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_schemaMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_moreProps() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 20) === peg$c128) {
          s3 = peg$c128;
          peg$currPos += 20;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 21) === peg$c130) {
            s3 = peg$c130;
            peg$currPos += 21;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c131); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_requiredProps() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c132) {
          s2 = peg$c132;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c133); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring_array();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_propertyNames() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 13) === peg$c134) {
          s4 = peg$c134;
          peg$currPos += 13;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c136();
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c137(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c138(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_size() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 13) === peg$c139) {
          s3 = peg$c139;
          peg$currPos += 13;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c141) {
            s3 = peg$c141;
            peg$currPos += 13;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c142); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsearray_keyword() {
      var s0;

      s0 = peg$parsekw_items();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_prefixItems();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_unevaluatedItems();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_contains();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekws_mContains();
              if (s0 === peg$FAILED) {
                s0 = peg$parsekws_array_length();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsekw_uniqueness();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekw_items() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c143) {
          s2 = peg$c143;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c144); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_prefixItems() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c145) {
          s2 = peg$c145;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c146); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_array();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_unevaluatedItems() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c147) {
          s2 = peg$c147;
          peg$currPos += 16;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c148); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_contains() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c149) {
          s2 = peg$c149;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c150); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_mContains() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c151) {
          s3 = peg$c151;
          peg$currPos += 11;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c153) {
            s3 = peg$c153;
            peg$currPos += 11;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c154); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_array_length() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c155) {
          s3 = peg$c155;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c157) {
            s3 = peg$c157;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c158); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_uniqueness() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c159) {
          s2 = peg$c159;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseboolean();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemedia_keyword() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekw_contentMediaType();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekw_contentEncoding();
        if (s1 === peg$FAILED) {
          s1 = peg$parsekw_contentSchema();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekw_contentMediaType() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c161) {
          s2 = peg$c161;
          peg$currPos += 16;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemime_type();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemime_type() {
      var s0;

      s0 = peg$c163;

      return s0;
    }

    function peg$parsekw_contentEncoding() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 15) === peg$c164) {
          s2 = peg$c164;
          peg$currPos += 15;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseencoding();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseencoding() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c166) {
          s3 = peg$c166;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c168) {
            s3 = peg$c168;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c169); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c170) {
              s3 = peg$c170;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c171); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 16) === peg$c172) {
                s3 = peg$c172;
                peg$currPos += 16;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c173); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c174) {
                  s3 = peg$c174;
                  peg$currPos += 6;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c175); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c176) {
                    s3 = peg$c176;
                    peg$currPos += 6;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c177); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c178) {
                      s3 = peg$c178;
                      peg$currPos += 6;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c179); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c180(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_contentSchema() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c181) {
          s2 = peg$c181;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c182); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschemaComposition_keyword() {
      var s0;

      s0 = peg$parsekws_combineSchemas();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_notSchema();
      }

      return s0;
    }

    function peg$parsekws_combineSchemas() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c183) {
          s3 = peg$c183;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c185) {
            s3 = peg$c185;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c186); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c187) {
              s3 = peg$c187;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c188); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_array();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c189(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c29(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_notSchema() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c190) {
          s2 = peg$c190;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c191); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconditionalSubschemas_keyword() {
      var s0;

      s0 = peg$parsekw_dependentRequired();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_dependentSchemas();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_ifThenElse();
        }
      }

      return s0;
    }

    function peg$parsekw_dependentRequired() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 17) === peg$c192) {
          s2 = peg$c192;
          peg$currPos += 17;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c193); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_arrayOfStringsMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_dependentSchemas() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c194) {
          s2 = peg$c194;
          peg$currPos += 16;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c195); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_schemaMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_ifThenElse() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c196) {
          s4 = peg$c196;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c197); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c198) {
            s4 = peg$c198;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c199); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c200) {
              s4 = peg$c200;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c201); }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c202(s4);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c203(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestructuring_keyword() {
      var s0;

      s0 = peg$parsekw_schema();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_id();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_anchor();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_ref();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekw_defs();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekw_schema() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c204) {
          s2 = peg$c204;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c205); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_value();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c206(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c207(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_value() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 30) === peg$c208) {
          s4 = peg$c208;
          peg$currPos += 30;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s4 !== peg$FAILED) {
          if (peg$c210.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c211); }
          }
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c212) {
              s6 = peg$c212;
              peg$currPos += 8;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c213); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 32) === peg$c214) {
            s4 = peg$c214;
            peg$currPos += 32;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c215); }
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c216) {
              s5 = peg$c216;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c217); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c218) {
                s5 = peg$c218;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c219); }
              }
            }
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c220) {
                s6 = peg$c220;
                peg$currPos += 7;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c221); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s4 = peg$c222(s2);
            if (s4) {
              s4 = void 0;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c44(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_id() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c223) {
          s2 = peg$c223;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c224); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_id();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c225(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c226(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_anchor() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c227) {
          s2 = peg$c227;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseanchor();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_ref() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c229) {
          s2 = peg$c229;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c230); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_ref();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_defs() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c231) {
          s2 = peg$c231;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c232); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_schemaMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_object() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$parsefalse();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetrue();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c233();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$parsews();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s3 = peg$c4;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsews();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c234();
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parsekeyword();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parsevalue_separator();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsekeyword();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c235(s3, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parsevalue_separator();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsekeyword();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s6 = peg$c235(s3, s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c236(s3, s4);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsews();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s5 = peg$c9;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsews();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c237(s2);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s4 = peg$c238(s2);
                if (s4) {
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c239(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseobject() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsemember();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsemember();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c235(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsemember();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c235(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c240(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c241(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemember() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c242(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseobject_schemaMap() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseschema_member();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseschema_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c235(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseschema_member();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c235(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c240(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c241(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_member() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseschema_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c242(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseobject_arrayOfStringsMap() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsearrayOfStrings_member();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsearrayOfStrings_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c235(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsearrayOfStrings_member();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c235(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c240(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c241(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsearrayOfStrings_member() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c242(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsearray() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsevalue();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsevalue();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c244(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevalue();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c244(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c245(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c246(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }

      return s0;
    }

    function peg$parsestring_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsestring();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsestring();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c244(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestring();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c244(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c245(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c246(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }

      return s0;
    }

    function peg$parseschema_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseschema_object();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseschema_object();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c244(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseschema_object();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c244(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c245(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c246(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c248); }
      }

      return s0;
    }

    function peg$parsetype_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsetype();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetype();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c244(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetype();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c244(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c250(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c251(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c253;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c254); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefrac();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c255();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }

      return s0;
    }

    function peg$parsepositiveNumber() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseint();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefrac();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c255();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c256); }
      }

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (peg$c257.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c253;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s2 = peg$c259;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c260); }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c261.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c262); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c261.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c262); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefrac() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c263;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c264); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c261.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c262); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c261.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c262); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 48) {
        s3 = peg$c266;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c267); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c266;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c267); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (peg$c268.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c269); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c261.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c262); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c261.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c262); }
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c270(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c266;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c267); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (input.charCodeAt(peg$currPos) === 48) {
            s4 = peg$c266;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c267); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 48) {
              s4 = peg$c266;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c267); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c270(s2);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c271(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c265); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsechar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsechar();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c273(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c272); }
      }

      return s0;
    }

    function peg$parseanchor() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanchor_value();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c275(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c274); }
      }

      return s0;
    }

    function peg$parseschema_id() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 28) === peg$c276) {
          s2 = peg$c276;
          peg$currPos += 28;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c277); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 13) === peg$c278) {
            s5 = peg$c278;
            peg$currPos += 13;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c279); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
              s8 = peg$c280;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c281); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              if (peg$c282.test(input.charAt(peg$currPos))) {
                s10 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c283); }
              }
              if (s10 !== peg$FAILED) {
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (peg$c282.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c283); }
                  }
                }
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 47) {
                  s8 = peg$c280;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c281); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  if (peg$c282.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c283); }
                  }
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      if (peg$c282.test(input.charAt(peg$currPos))) {
                        s10 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c283); }
                      }
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseQM();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c284(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_ref() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 28) === peg$c276) {
          s2 = peg$c276;
          peg$currPos += 28;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c277); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s5 = peg$c286;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c287); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseref_segment();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 14) === peg$c288) {
              s5 = peg$c288;
              peg$currPos += 14;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c289); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c282.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c283); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c282.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c283); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseref_segment();
                if (s7 !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseQM();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c290(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }

      return s0;
    }

    function peg$parseanchor_value() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c291.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c292); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c293.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c294); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c293.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c294); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseref_segment() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c286;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c287); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanchor_value();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = [];
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c280;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c281); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c295.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c296); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c295.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c296); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c280;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c281); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c295.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c296); }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c295.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c296); }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$parseunescaped();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseescape();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c297;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c299;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c300); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c280;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c281); }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c301;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c302); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c303();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c304;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c305); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c306();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c307;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c308); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c309();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c310;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c311); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c312();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c313;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c314); }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c315();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c316;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c317); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$currPos;
                            s6 = peg$parseHEXDIG();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG();
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos);
                            } else {
                              s4 = s5;
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c318(s4);
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c319(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseescape() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c299;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }

      return s0;
    }

    function peg$parseQM() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c297;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }

      return s0;
    }

    function peg$parseunescaped() {
      var s0;

      if (peg$c320.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c322.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }

      return s0;
    }


      let depth = []
      let current_key = ""
      let ids = []
      let subschemas = []
      let anon_schemas = 0
      let refs = []
      let anchors = []
      let propertyNames_refs = []

      let genericKeys = ["type","enum","const","default"]
      let annotationKeys = ["title","description","examples","readOnly","writeOnly","deprecated","$comment"] // a gramática reconhece mas ignora
      let mediaKeys = ["contentMediaType","contentEncoding","contentSchema"] // a gramática reconhece mas ignora
      let schemaKeys = ["allOf","anyOf","oneOf","not","if","then","else"]
      let structuringKeys = ["$schema","$id","$anchor","$ref","$defs"]

      let stringKeys = ["minLength","maxLength","pattern","format"]
      let numericKeys = ["multipleOf","minimum","exclusiveMinimum","maximum","exclusiveMaximum"]
      let objectKeys = ["properties","patternProperties","additionalProperties","unevaluatedProperties","required","propertyNames","minProperties","maxProperties","dependentRequired","dependentSchemas"]
      let arrayKeys = ["items","prefixItems","unevaluatedItems","contains","minContains","maxContains","minItems","maxItems","uniqueItems"]

      // chave só permitida na raiz
      const atRoot = kw => !depth[depth.length-1] ? true : error(`A chave '${kw}' só é permitida ao nível da raiz da (sub)schema!`)
      // todos os ids devem ser únicos
      const newId = id => !ids.includes(id) ? true : error(`Todas as propriedades '$id' devem ser únicas! Há mais do que uma (sub)schema cujo '$id' é '${id}'.`)
      // verificar se objeto tem todas as propriedades em questão
      const hasAll = (k, obj) => typeof k == "string" ? k in obj : k.every(key => key in obj)
      // verificar se objeto alguma das propriedades em questão
      const hasAny = (k, obj) => k.some(key => key in obj)

      // retorna o tipo de um valor explícito (não considera inteiros porque são classificados como numbers na estrutura gerada pela DSL)
      function getValueType(value) {
        if (Array.isArray(value)) return "array"
        else if (value === null) return "null"
        return typeof value
      }

      // fazer todas as verificações necessárias para garantir que a schema está bem escrita
      function checkSchema(s) {
        s = determineType(s)
        return checkKeysByType(s) && checkRangeKeywords(s) && checkDependentRequired(s) && checkDependentSchemas(s) && checkRequiredProps(s) && checkMaxProperties(s) && 
               checkContains(s) && checkArrayLength(s) && checkEnumArray(s) && checkConstType(s) && checkIfThenElse(s) && checkContentSchema(s)
      }

      // formatar os dados para a estrutura intermédia pretendida
      function structureSchemaData(obj) {
        if (obj === null) obj = {type: ["string","integer","number","boolean","null","array","object"]}
        let schema = {type: {}}

        for (let k of obj.type) {
          if (k == "integer") {
            if (!("number" in schema.type)) schema.type.number = {}
            schema.type.number.integer = true
          }
          else schema.type[k] = {}
        }
        delete obj.type

        for (let k in obj) {
          if (k == "const" || k == "default") {
            let v_type = getValueType(obj[k])
            if (!(v_type in schema.type)) schema.type[v_type] = {}
            schema.type[v_type][k] = obj[k]
          }
          else if (k == "enum") structureEnum(schema, obj[k])
          else if (k == "oneOf") structureOneOf(schema, obj[k])
          else if (["if","then","else"].includes(k)) {
            for (let key in obj[k].type) {
              if (!(key in schema.type)) schema.type[key] = {}
              schema.type[key][k] = obj[k].type[key]
            }
          }
          else if (numericKeys.includes(k)) schema.type.number[k] = obj[k]
          else if (stringKeys.includes(k)) schema.type.string[k] = obj[k]
          else if (objectKeys.includes(k)) schema.type.object[k] = obj[k]
          else if (arrayKeys.includes(k)) schema.type.array[k] = obj[k]
          else schema[k] = obj[k]
        }

        // verificar a coerência das chaves numéricas
        if ("type" in schema && "number" in schema.type) {
          let valid = checkNumericKeys(schema.type.number, 0)
          if (valid !== true) return valid
        }

        if (!Object.keys(schema.type).length) {
          // se a schema só tiver um subset das chaves {$id, $schema, $anchor, $defs}, pode gerar qualquer tipo de valor
          if (!Object.keys(schema).includes("$ref")) schema.type = {string: {}, number: {}, boolean: {}, null: {}, array: {}, object: {}}
          else delete schema.type
        }
        return schema
      }

      // formatar um enum para a estrutura intermédia pretendida
      function structureEnum(schema, arr) {
        // separar os elementos da enumeração por tipos
        let by_types = arr.reduce((obj,elem) => {
          let v_type = getValueType(elem)
          if (!(v_type in obj)) obj[v_type] = []
          obj[v_type].push(elem)
          return obj
        }, {})

        // cada subdivisão é tornada numa enum nova e colocada no respetivo tipo, na estrutura intermédia
        for (let type in by_types) {
          if (!(type in schema.type)) schema.type[type] = {}
          schema.type[type].enum = by_types[type]
        }
      }

      // format um oneOf para a estrutura intermédia pretendida
      function structureOneOf(schema, arr) {
        // separar os elementos do oneOf por tipos (garantido que cada elemento tem um único tipo, graças à checkCompositionTypes)
        let by_types = arr.reduce((obj,elem) => {
          // se uma schema não tiver tipo, é porque tem apenas um subset das seguintes chaves: $ref, $defs ou chaves de composição de schemas
          // no converter é preciso reprocessar o que estiver neste tipo "undef" - se tem uma ref, terá novos dados, senão pode-se eliminar
          let el_type = "type" in elem ? Object.keys(elem.type)[0] : "undef"
          if (!(el_type in obj)) obj[el_type] = []

          if (el_type == "undef") obj[el_type].push(elem)
          // não vale a pena guardar uma schema vazia
          else if (Object.keys(elem.type[el_type]).length > 0) obj[el_type].push(elem.type[el_type])
          return obj
        }, {})

        // cada subdivisão é tornada num oneOf novo e colocado no respetivo tipo, na estrutura intermédia
        for (let type in by_types) {
          if (!(type in schema.type)) schema.type[type] = {}

          // se não houver schemas neste tipo (nenhuma schema foi guardada acima porque eram todas vazias - só foi especificado mesmo o tipo em cada uma), não vale a pena fazer mais nada
          // haverá a possibilidade de gerar este tipo na mesma, porque já foi colocado na estrutura intermédia na linha de código acima
          if (by_types[type].length > 0) schema.type[type].oneOf = by_types[type]
        }
      }

      // determinar o tipo do valor, se a chave 'type' não for especificada
      function determineType(obj) {
        if (obj === null) return {type: ["string"]}

        if (!hasAll("type", obj)) {
          let type = []

          for (let k in obj) {
            if (stringKeys.includes(k)) type.push("string")
            if (numericKeys.includes(k)) type.push("number")
            if (objectKeys.includes(k)) type.push("object")
            if (arrayKeys.includes(k)) type.push("array")
          }

          obj.type = [...new Set(type)]
        }

        return obj
      }

      // verificar que não se usam chaves específicas a tipos nos tipos errados
      function checkKeysByType(obj) {
        let keywords = genericKeys.concat(annotationKeys, mediaKeys, schemaKeys, structuringKeys)
        
        for (let i = 0; i < obj.type.length; i++) {
          switch (obj.type[i]) {
            case "string": keywords = keywords.concat(stringKeys); break
            case "integer": case "number": keywords = keywords.concat(numericKeys); break
            case "object": keywords = keywords.concat(objectKeys); break
            case "array": keywords = keywords.concat(arrayKeys); break
          }
        }

        for (let k in obj)
          if (!keywords.includes(k)) return error(`O tipo {${obj.type.join(", ")}} não suporta a chave '${k}'!`)
            
        return true
      }

      // verificar a coerência das chaves de alcance de tipos númericos e string
      function checkRangeKeywords(obj) {
        let min = null, max = null, emin = null, emax = null

        if (hasAll("minimum", obj)) min = obj.minimum
        if (hasAll("maximum", obj)) max = obj.maximum
        if (hasAll("exclusiveMinimum", obj)) emin = obj.exclusiveMinimum
        if (hasAll("exclusiveMaximum", obj)) emax = obj.exclusiveMaximum

        if (min !== null && max !== null && min > max) return error(`O valor da chave 'minimum' deve ser <= ao da chave 'maximum'!`)
        if (min !== null && emax !== null && min >= emax) return error(`O valor da chave 'minimum' deve ser < ao da chave 'exclusiveMaximum'!`)
        if (max !== null && emin !== null && max <= emin) return error(`O valor da chave 'maximum' deve ser > ao da chave 'exclusiveMinimum'!`)

        if (min !== null && emin !== null) {
          if (emin >= min) delete obj.minimum
          else delete obj.exclusiveMinimum
        }
        if (max !== null && emax !== null) {
          if (emax <= max) delete obj.maximum
          else delete obj.exclusiveMaximum
        }

        if (hasAll(["maxLength", "minLength"], obj) && obj.minLength > obj.maxLength) return error(`O valor da chave 'minLength' deve ser <= ao da chave 'maxLength'!`)

        return true
      }

      // verificar a coerência do array de propriedades da chave 'required'
      function checkRequiredProps(obj) {
        if (hasAll("required", obj)) {
          if (!obj.required.length) {delete obj.required; return true}

          if (obj.required.length != [...new Set(obj.required)].length) return error("Todos os elementos do array da chave 'required' devem ser únicos!")
          
          let properties = hasAll("properties", obj) ? Object.keys(obj.properties) : []
          let patternProperties = hasAll("patternProperties", obj) ? Object.keys(obj.patternProperties).map(p => new RegExp(p)) : []

          for (let i = 0; i < obj.required.length; i++) {
            if (properties.includes(obj.required[i])) ;
            else if (patternProperties.some(p => p.test(obj.required[i]))) ;
            else if (!hasAny(["additionalProperties", "unevaluatedProperties"], obj)) ;
            else if (hasAll("additionalProperties", obj) && obj.additionalProperties !== false) ;
            else if (!hasAll("additionalProperties", obj) && hasAll("unevaluatedProperties", obj) && obj.unevaluatedProperties !== false) ;
            else return error(`A propriedade '${obj.required[i]}' referida na chave 'required' não é permitida no objeto pela schema!`)
          }
        }
        return true
      }

      // verificar que a schema dada pela chave 'propertyNames' é do tipo string
      function checkPropertyNamesType(obj) {
        if (obj === false || (typeof obj !== "boolean" && hasAll("type", obj) && Object.keys(obj.type).some(k => k != "string")))
          return error(`Como as chaves de objetos devem ser sempre strings, está implícito que a schema dada pela chave 'propertyNames' deve ser do tipo 'string' (apenas)!`)
        return true
      }

      // verificar que as chaves 'required' e de tamanho do objeto não se contradizem
      function checkMaxProperties(obj) {
        if (hasAll(["required", "maxProperties"], obj))
          if (obj.maxProperties < obj.required.length) return error(`A chave 'maxProperties' define que o objeto deve ter, no máximo, ${obj.maxProperties} propriedades, contudo a chave 'required' define que há ${obj.required.length} propriedades obrigatórias!`)

        if (hasAll("minProperties", obj)) {
          if (!hasAll("patternProperties", obj) && (
            (hasAll("additionalProperties", obj) && obj.additionalProperties === false) || 
            (!hasAll("additionalProperties", obj) && hasAll("unevaluatedProperties", obj) && obj.unevaluatedProperties === false))) {
              let properties = hasAll("properties", obj) ? Object.keys(obj.properties).length : 0
              if (properties < obj.minProperties) return error(`A chave 'minProperties' define que o objeto deve ter, no mínimo, ${obj.minProperties} propriedades, contudo a schema permite um máximo de ${properties} propriedades no objeto!`)
          }
        }
        return true
      }

      // verificar a coerência das chaves de contenção 
      function checkContains(obj) {
        if (!hasAll("contains", obj)) {
          if (hasAny(["minContains","maxContains"], obj)) return error("As chaves 'minContains' e 'maxContains' só podem ser usadas em conjunto com a chave 'contains'!")
        }
        else if (hasAll(["minContains","maxContains"], obj) && obj.minContains > obj.maxContains) return error("O valor da chave 'minContains' deve ser <= ao da chave 'maxContains'!")

        if (hasAll(["minContains", "maxItems"], obj) && obj.minContains > obj.maxItems) return error(`O array deve ter pelo menos ${obj.minContains} elementos, segundo a chave 'minContains', mas a chave 'maxItems' define um limite máximo de ${obj.maxItems}!`)

        return true
      }

      // verificar a coerência das chaves de comprimento de arrays
      function checkArrayLength(obj) {
        if (hasAll(["minItems","maxItems"], obj) && obj.minItems > obj.maxItems) return error("O valor da chave 'minItems' deve ser <= ao da chave 'maxItems'!")

        if (("items" in obj && obj.items === false) || (!hasAll("items", obj) && hasAll("unevaluatedItems", obj) && obj.unevaluatedItems === false)) {
          let prefixed = hasAll("prefixItems", obj) ? obj.prefixItems.length : 0
          if (hasAll("minItems", obj) && obj.minItems > prefixed) return error(`A chave 'minItems' define que o array deve ter, no mínimo, ${obj.minItems} elementos, contudo a schema não permite mais de ${prefixed} elementos!`)
          if (hasAll("maxItems", obj) && obj.maxItems > prefixed) obj.maxItems = prefixed
        }

        if (hasAll(["prefixItems","minItems","items"], obj) && obj.items === false && obj.minItems > obj.prefixItems.length)
          return error(`A chave 'minItems' define que o array deve ter, no mínimo, ${obj.minItems} elementos, contudo a chave 'prefixItems' especifica apenas ${obj.prefixItems.length} elementos e a chave 'items' proibe elementos extra para além desses!`)

        return true
      }

      // verificar que os elementos do array da chave 'enum' são todos únicos (não funciona para elementos array/objeto) e do tipo correto
      function checkEnumArray(obj) {
        if (hasAll("enum", obj)) {
          if (!obj.enum.length) return error("O array da chave 'enum' deve ter, no mínimo, um elemento!")
          if (obj.enum.length != [...new Set(obj.enum)].length) return error("Todos os elementos do array da chave 'enum' devem ser únicos!")

          if (hasAll("type", obj) && obj.type.length > 0) {
            for (let i = 0; i < obj.enum.length; i++) {
              let valid = false

              for (let j = 0; j < obj.type.length; j++) {
                if (obj.type[j] == "array" && Array.isArray(obj.enum[i])) {valid = true; break}
                else if (obj.type[j] == "null" && obj.enum[i] === null) {valid = true; break}
                //else if (obj.type[j] == "integer" && Number.isInteger(obj.enum[i])) {valid = true; break}
                else if (typeof obj.enum[i] == obj.type[j]) {valid = true; break}
              }

              if (!valid) return error(`Todos os elementos do array da chave 'enum' devem ser do tipo {${obj.type.join(", ")}}, segundo definido pela chave 'type'!`)
            }
          }
        }
        return true
      }

      // verificar se o valor da chave 'const' é do tipo correto
      function checkConstType(obj) {
        if (hasAll("const", obj) && obj.type.length > 0) {
          let valid = false

          for (let j = 0; j < obj.type.length; j++) {
            if (obj.type[j] == "array" && Array.isArray(obj.const)) {valid = true; break}
            else if (obj.type[j] == "null" && obj.const === null) {valid = true; break}
            //else if (obj.type[j] == "integer" && Number.isInteger(obj.const)) {valid = true; break}
            else if (typeof obj.const == obj.type[j]) {valid = true; break}
          }

          if (!valid) return error(`O valor da chave 'const' deve ser do tipo {${obj.type.join(", ")}}, segundo definido pela chave 'type'!`)
        }
        return true
      }

      // verificar os requisitos necessários para se considerar a chave 'contentSchema'
      function checkContentSchema(obj) {
        if (hasAll("contentSchema", obj) && !(hasAll(["type","contentMediaType"], obj) && obj.type.includes("string")))
          return error("O valor da chave 'contentSchema' só é considerado se a instância for uma string e a chave 'contentMediaType' estiver presente!")
        return true
      }

      // verificar que todas as propriedades referidas na chave 'dependentRequired' são válidas
      function checkDependentRequired(obj) {
        if (hasAll("dependentRequired", obj)) {
          for (let key in obj.dependentRequired) {
            // remover propriedades repetidas
            obj.dependentRequired[key] = [...new Set(obj.dependentRequired[key])]
            let array_value = obj.dependentRequired[key]

            // se tiver a propriedade dependente dela mesma, remover porque é redundante
            if (array_value.includes(key)) obj.dependentRequired[key].splice(obj.dependentRequired[key].indexOf(key), 1)
          }

          if (hasAll("required", obj)) {
            for (let i = 0; i < obj.required.length; i++) {
              let k = obj.required[i]
              if (k in obj.dependentRequired) obj.required = obj.required.concat(obj.dependentRequired[k].filter(x => !obj.required.includes(x)))
            }
          }
        }
        return true
      }

      function checkDependentSchemas(obj) {
        if (hasAll("dependentSchemas", obj)) {
          for (let k in obj.dependentSchemas) {
            if ("type" in obj.dependentSchemas[k]) {
              let type_keys = Object.keys(obj.dependentSchemas[k].type)
              if (type_keys.length > 1 || type_keys[0] != "object") return error(`As subschemas especificadas na chave 'dependentSchemas' deve ser do tipo 'object' (apenas), visto que são aplicadas a uma schema desse mesmo tipo!`)

              if (hasAll("required", obj)) {
                let subschema = obj.dependentSchemas[k].type.object
                if (obj.required.includes(k)) {
                  if (hasAll("required", subschema)) obj.required = obj.required.concat(subschema.required.filter(x => !obj.required.includes(x)))
                }
              }
            }
            //else verificar que as subschemas são do tipo object também
          }
        }

        return true
      }

      // verificar as condições if then else
      function checkIfThenElse(obj) {
        if (hasAny(["if","then","else"], obj)) {
          if (!hasAll("if", obj)) return error("Não pode usar as chaves 'then' e/ou 'else' numa schema sem usar a chave 'if'!")
        }
        return true
      }

      // verificar que as chaves de tipo numérico são todas coerentes e gerar o modelo da DSL para gerar um valor correspondente
      function checkNumericKeys(obj, nesting) {
        let {multipleOf, minimum, maximum, exclusiveMinimum, exclusiveMaximum} = obj
        if (multipleOf === undefined) multipleOf = 1
        else multipleOf = multipleOf[0]

        let frac = multipleOf % 1 != 0
        let max = null, min = null
        let upper = null, lower = null
        let int_multiples = []

        if (maximum !== undefined) max = maximum
        if (exclusiveMaximum !== undefined) max = exclusiveMaximum - (frac ? 0.0000000001 : 1)

        if (minimum !== undefined) min = minimum
        if (exclusiveMinimum !== undefined) min = exclusiveMaximum + (frac ? 0.0000000001 : 1)

        if (max !== null && min !== null) {
          upper = Math.floor(max/multipleOf)
          lower = Math.ceil(min/multipleOf)
          
          if (upper - lower < 0) return error(`Não existem múltiplos do número '${multipleOf}' no intervalo de valores especificado com as chaves de alcance!`)
          else if (frac && "integer" in obj) {
            let decimal_part = parseFloat((multipleOf % 1).toFixed(4))

            for (let i = lower; i <= upper; i++) {
              if ((decimal_part * i) % 1 == 0) int_multiples.push(i)
            }

            if (!int_multiples.length) return error(`Não existem múltiplos inteiros do número '${multipleOf}' no intervalo de valores especificado com as chaves de alcance!`)
          }
        }
        
        return true
      }

      // separar as subschemas do oneOf por tipos de dados geráveis em subschemas mais pequenas, de forma a garantir que todos os elementos do oneOf podem gerar 1 único tipo de dados
      // uma subschema só fica com um tipo se tiver chaves de algum dos tipos de dados primitivos
      function checkCompositionTypes(key, value) {
        if (key == "oneOf") {
          for (let i = 0; i < value.length; i++) {
            if ("type" in value[i]) {
              let types = Object.keys(value[i].type)

              if (types.length > 1) {
                let elem = value.splice(i--, 1)[0]

                for (let j = 0; j < types.length; j++) {
                  let new_schema = {type: {}}
                  new_schema.type[types[j]] = elem.type[types[j]]
                  value.push(new_schema)
                }
              }
            }
          }
        }

        return true
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();