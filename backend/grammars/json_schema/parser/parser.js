const { checkSchema } = require('./schema_checker')
const { structureSchemaData } = require('./struct_builder')
const aux = require('./grammar_aux')

module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Dialect: peg$parseDialect },
        peg$startRuleFunction  = peg$parseDialect,

        peg$c0 = function() {return error("A schema não pode ser falsa, pois nesse caso é impossível gerar qualquer valor!")},
        peg$c1 = function(schema) {return {schema, subschemas, pn_refs: propertyNames_refs}},
        peg$c2 = "[",
        peg$c3 = peg$literalExpectation("[", false),
        peg$c4 = function() {depth[depth.length-1]++},
        peg$c5 = "{",
        peg$c6 = peg$literalExpectation("{", false),
        peg$c7 = "]",
        peg$c8 = peg$literalExpectation("]", false),
        peg$c9 = function() {depth[depth.length-1]--},
        peg$c10 = "}",
        peg$c11 = peg$literalExpectation("}", false),
        peg$c12 = ":",
        peg$c13 = peg$literalExpectation(":", false),
        peg$c14 = ",",
        peg$c15 = peg$literalExpectation(",", false),
        peg$c16 = peg$otherExpectation("whitespace"),
        peg$c17 = /^[ \t\n\r]/,
        peg$c18 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        peg$c19 = "false",
        peg$c20 = peg$literalExpectation("false", false),
        peg$c21 = function() { return false; },
        peg$c22 = "null",
        peg$c23 = peg$literalExpectation("null", false),
        peg$c24 = function() { return null;  },
        peg$c25 = "true",
        peg$c26 = peg$literalExpectation("true", false),
        peg$c27 = function() { return true;  },
        peg$c28 = "type",
        peg$c29 = peg$literalExpectation("type", false),
        peg$c30 = function(key, value) {return {key, value}},
        peg$c31 = function(t) {return [t]},
        peg$c32 = function(arr) {return arr},
        peg$c33 = "string",
        peg$c34 = peg$literalExpectation("string", false),
        peg$c35 = "number",
        peg$c36 = peg$literalExpectation("number", false),
        peg$c37 = "integer",
        peg$c38 = peg$literalExpectation("integer", false),
        peg$c39 = "object",
        peg$c40 = peg$literalExpectation("object", false),
        peg$c41 = "array",
        peg$c42 = peg$literalExpectation("array", false),
        peg$c43 = "boolean",
        peg$c44 = peg$literalExpectation("boolean", false),
        peg$c45 = function(v) {return v},
        peg$c46 = "enum",
        peg$c47 = peg$literalExpectation("enum", false),
        peg$c48 = "const",
        peg$c49 = peg$literalExpectation("const", false),
        peg$c50 = function(key, value) {return {key, value: [value]}},
        peg$c51 = "default",
        peg$c52 = peg$literalExpectation("default", false),
        peg$c53 = function() {return null},
        peg$c54 = "title",
        peg$c55 = peg$literalExpectation("title", false),
        peg$c56 = "description",
        peg$c57 = peg$literalExpectation("description", false),
        peg$c58 = "$comment",
        peg$c59 = peg$literalExpectation("$comment", false),
        peg$c60 = "examples",
        peg$c61 = peg$literalExpectation("examples", false),
        peg$c62 = "readOnly",
        peg$c63 = peg$literalExpectation("readOnly", false),
        peg$c64 = "writeOnly",
        peg$c65 = peg$literalExpectation("writeOnly", false),
        peg$c66 = "deprecated",
        peg$c67 = peg$literalExpectation("deprecated", false),
        peg$c68 = "minLength",
        peg$c69 = peg$literalExpectation("minLength", false),
        peg$c70 = "maxLength",
        peg$c71 = peg$literalExpectation("maxLength", false),
        peg$c72 = "pattern",
        peg$c73 = peg$literalExpectation("pattern", false),
        peg$c74 = "format",
        peg$c75 = peg$literalExpectation("format", false),
        peg$c76 = "date-time",
        peg$c77 = peg$literalExpectation("date-time", false),
        peg$c78 = "time",
        peg$c79 = peg$literalExpectation("time", false),
        peg$c80 = "date",
        peg$c81 = peg$literalExpectation("date", false),
        peg$c82 = "duration",
        peg$c83 = peg$literalExpectation("duration", false),
        peg$c84 = "email",
        peg$c85 = peg$literalExpectation("email", false),
        peg$c86 = "idn-email",
        peg$c87 = peg$literalExpectation("idn-email", false),
        peg$c88 = "hostname",
        peg$c89 = peg$literalExpectation("hostname", false),
        peg$c90 = "idn-hostname",
        peg$c91 = peg$literalExpectation("idn-hostname", false),
        peg$c92 = "ipv4",
        peg$c93 = peg$literalExpectation("ipv4", false),
        peg$c94 = "ipv6",
        peg$c95 = peg$literalExpectation("ipv6", false),
        peg$c96 = "uuid",
        peg$c97 = peg$literalExpectation("uuid", false),
        peg$c98 = "uri-reference",
        peg$c99 = peg$literalExpectation("uri-reference", false),
        peg$c100 = "uri-template",
        peg$c101 = peg$literalExpectation("uri-template", false),
        peg$c102 = "uri",
        peg$c103 = peg$literalExpectation("uri", false),
        peg$c104 = "iri-reference",
        peg$c105 = peg$literalExpectation("iri-reference", false),
        peg$c106 = "iri",
        peg$c107 = peg$literalExpectation("iri", false),
        peg$c108 = "json-pointer",
        peg$c109 = peg$literalExpectation("json-pointer", false),
        peg$c110 = "relative-json-pointer",
        peg$c111 = peg$literalExpectation("relative-json-pointer", false),
        peg$c112 = "regex",
        peg$c113 = peg$literalExpectation("regex", false),
        peg$c114 = function(f) {return f},
        peg$c115 = "multipleOf",
        peg$c116 = peg$literalExpectation("multipleOf", false),
        peg$c117 = "minimum",
        peg$c118 = peg$literalExpectation("minimum", false),
        peg$c119 = "exclusiveMinimum",
        peg$c120 = peg$literalExpectation("exclusiveMinimum", false),
        peg$c121 = "maximum",
        peg$c122 = peg$literalExpectation("maximum", false),
        peg$c123 = "exclusiveMaximum",
        peg$c124 = peg$literalExpectation("exclusiveMaximum", false),
        peg$c125 = "patternProperties",
        peg$c126 = peg$literalExpectation("patternProperties", false),
        peg$c127 = "properties",
        peg$c128 = peg$literalExpectation("properties", false),
        peg$c129 = function(key, value) {return aux.checkFalseProp(key, value, error)},
        peg$c130 = "additionalProperties",
        peg$c131 = peg$literalExpectation("additionalProperties", false),
        peg$c132 = "unevaluatedProperties",
        peg$c133 = peg$literalExpectation("unevaluatedProperties", false),
        peg$c134 = "required",
        peg$c135 = peg$literalExpectation("required", false),
        peg$c136 = "propertyNames",
        peg$c137 = peg$literalExpectation("propertyNames", false),
        peg$c138 = function() {current_key = "propertyNames"},
        peg$c139 = function(key, value) {return aux.checkPropertyNamesType(value, error)},
        peg$c140 = function(key, value) {current_key = ""; return {key, value: typeof value == "boolean" ? {type: {def: true, string: {}}} : value}},
        peg$c141 = "minProperties",
        peg$c142 = peg$literalExpectation("minProperties", false),
        peg$c143 = "maxProperties",
        peg$c144 = peg$literalExpectation("maxProperties", false),
        peg$c145 = "items",
        peg$c146 = peg$literalExpectation("items", false),
        peg$c147 = "prefixItems",
        peg$c148 = peg$literalExpectation("prefixItems", false),
        peg$c149 = "unevaluatedItems",
        peg$c150 = peg$literalExpectation("unevaluatedItems", false),
        peg$c151 = "contains",
        peg$c152 = peg$literalExpectation("contains", false),
        peg$c153 = function(key, value) {return aux.checkFalseSchema(key, value, error)},
        peg$c154 = "minContains",
        peg$c155 = peg$literalExpectation("minContains", false),
        peg$c156 = "maxContains",
        peg$c157 = peg$literalExpectation("maxContains", false),
        peg$c158 = "minItems",
        peg$c159 = peg$literalExpectation("minItems", false),
        peg$c160 = "maxItems",
        peg$c161 = peg$literalExpectation("maxItems", false),
        peg$c162 = "uniqueItems",
        peg$c163 = peg$literalExpectation("uniqueItems", false),
        peg$c164 = "contentMediaType",
        peg$c165 = peg$literalExpectation("contentMediaType", false),
        peg$c166 = "contentEncoding",
        peg$c167 = peg$literalExpectation("contentEncoding", false),
        peg$c168 = "7bit",
        peg$c169 = peg$literalExpectation("7bit", false),
        peg$c170 = "8bit",
        peg$c171 = peg$literalExpectation("8bit", false),
        peg$c172 = "binary",
        peg$c173 = peg$literalExpectation("binary", false),
        peg$c174 = "quoted-printable",
        peg$c175 = peg$literalExpectation("quoted-printable", false),
        peg$c176 = "base16",
        peg$c177 = peg$literalExpectation("base16", false),
        peg$c178 = "base32",
        peg$c179 = peg$literalExpectation("base32", false),
        peg$c180 = "base64",
        peg$c181 = peg$literalExpectation("base64", false),
        peg$c182 = function(e) {return e},
        peg$c183 = "contentSchema",
        peg$c184 = peg$literalExpectation("contentSchema", false),
        peg$c185 = "allOf",
        peg$c186 = peg$literalExpectation("allOf", false),
        peg$c187 = "anyOf",
        peg$c188 = peg$literalExpectation("anyOf", false),
        peg$c189 = "oneOf",
        peg$c190 = peg$literalExpectation("oneOf", false),
        peg$c191 = function(key, value) {return aux.checkCompositionTypes(key, value, error)},
        peg$c192 = "not",
        peg$c193 = peg$literalExpectation("not", false),
        peg$c194 = function() {current_key = "not"},
        peg$c195 = function(key, value) {current_key = ""; return {key, value}},
        peg$c196 = "dependentRequired",
        peg$c197 = peg$literalExpectation("dependentRequired", false),
        peg$c198 = "dependentSchemas",
        peg$c199 = peg$literalExpectation("dependentSchemas", false),
        peg$c200 = "if",
        peg$c201 = peg$literalExpectation("if", false),
        peg$c202 = "then",
        peg$c203 = peg$literalExpectation("then", false),
        peg$c204 = "else",
        peg$c205 = peg$literalExpectation("else", false),
        peg$c206 = function(k) {current_key = k},
        peg$c207 = function(key, value) {return key != "if" ? aux.checkFalseSchema(key,value,error) : true},
        peg$c208 = "$schema",
        peg$c209 = peg$literalExpectation("$schema", false),
        peg$c210 = function(key, value) {return atRoot(key)},
        peg$c211 = function(key, value) {return null},
        peg$c212 = "http://json-schema.org/draft-0",
        peg$c213 = peg$literalExpectation("http://json-schema.org/draft-0", false),
        peg$c214 = /^[467]/,
        peg$c215 = peg$classExpectation(["4", "6", "7"], false, false),
        peg$c216 = "/schema#",
        peg$c217 = peg$literalExpectation("/schema#", false),
        peg$c218 = "https://json-schema.org/draft/20",
        peg$c219 = peg$literalExpectation("https://json-schema.org/draft/20", false),
        peg$c220 = "19-09",
        peg$c221 = peg$literalExpectation("19-09", false),
        peg$c222 = "20-12",
        peg$c223 = peg$literalExpectation("20-12", false),
        peg$c224 = "/schema",
        peg$c225 = peg$literalExpectation("/schema", false),
        peg$c226 = function(v) {return v == "https://json-schema.org/draft/2020-12/schema" ? true : error("Esta ferramenta implementa apenas a sintaxe do <b>draft 2020-12</b>!")},
        peg$c227 = "$id",
        peg$c228 = peg$literalExpectation("$id", false),
        peg$c229 = function(key, value) {return atRoot(key) && newId(value)},
        peg$c230 = function(key, value) {ids.push(value); return {key, value}},
        peg$c231 = "$anchor",
        peg$c232 = peg$literalExpectation("$anchor", false),
        peg$c233 = "$ref",
        peg$c234 = peg$literalExpectation("$ref", false),
        peg$c235 = "$defs",
        peg$c236 = peg$literalExpectation("$defs", false),
        peg$c237 = function(boolean) { return structureSchemaData(null, boolean, {current_key, error}) },
        peg$c238 = function() {depth.push(0); refs.push([]); anchors.push({})},
        peg$c239 = function(head, m) { return m; },
        peg$c240 = function(head, tail) {
                var result = {};
                [head].concat(tail).forEach(el => {if (el !== null) result[el.key] = el.value});
                return result;
            },
        peg$c241 = function(members) {depth.pop()},
        peg$c242 = function(members) { return checkSchema(members, error) },
        peg$c243 = function(members) { 
              let schema = structureSchemaData(members, null, {current_key, error})

              if ("$ref" in schema) refs[refs.length-1].push(schema)
              if ("$anchor" in schema) {
                let anchor_name = schema.$anchor
                delete schema.$anchor
                anchors[anchors.length-1][anchor_name] = schema
              }

              let new_refs = refs.pop()
              let new_anchors = anchors.pop()

              // guardar subschema se tiver um id ou se for a própria schema
              if ("$id" in schema || !refs.length) {
                let id = "$id" in schema ? schema.$id : ("anon" + ++anon_schemas)
                if ("$id" in schema) delete schema.$id
                subschemas.push({id, schema, refs: new_refs, anchors: new_anchors})
              }
              else {
                refs.push(refs.pop().concat(new_refs))
                Object.assign(anchors[anchors.length-1], new_anchors)
              }
              
              return schema
            },
        peg$c244 = function(head, tail) {
                var result = {};
                [head].concat(tail).forEach(el => {result[el.name] = el.value});
                return result;
            },
        peg$c245 = function(members) { return members !== null ? members: {}; },
        peg$c246 = function(name, value) {return {name, value}},
        peg$c247 = peg$otherExpectation("array"),
        peg$c248 = function(head, v) { return v; },
        peg$c249 = function(head, tail) { return [head].concat(tail); },
        peg$c250 = function(values) { return values !== null ? values : []; },
        peg$c251 = peg$otherExpectation("array of strings"),
        peg$c252 = peg$otherExpectation("array of schemas"),
        peg$c253 = peg$otherExpectation("array of JSON types"),
        peg$c254 = function(head, tail) { return tail.includes(head) ? error("Os elementos do array <b>type</b> devem ser todos únicos!") : [head].concat(tail); },
        peg$c255 = function(values) { return values !== null ? values : error("O array de tipos não pode ser vazio!"); },
        peg$c256 = peg$otherExpectation("number"),
        peg$c257 = "-",
        peg$c258 = peg$literalExpectation("-", false),
        peg$c259 = function() { return parseFloat(text()); },
        peg$c260 = peg$otherExpectation("positive number"),
        peg$c261 = "0",
        peg$c262 = peg$literalExpectation("0", false),
        peg$c263 = /^[1-9]/,
        peg$c264 = peg$classExpectation([["1", "9"]], false, false),
        peg$c265 = /^[0-9]/,
        peg$c266 = peg$classExpectation([["0", "9"]], false, false),
        peg$c267 = /^[eE]/,
        peg$c268 = peg$classExpectation(["e", "E"], false, false),
        peg$c269 = "+",
        peg$c270 = peg$literalExpectation("+", false),
        peg$c271 = ".",
        peg$c272 = peg$literalExpectation(".", false),
        peg$c273 = peg$otherExpectation("integer"),
        peg$c274 = function(i) {return i},
        peg$c275 = function(integer) {return parseInt(Array.isArray(integer) ? integer.flat().join("") : integer)},
        peg$c276 = peg$otherExpectation("string"),
        peg$c277 = function(str) {return str},
        peg$c278 = /^[^"]/,
        peg$c279 = peg$classExpectation(["\""], true, false),
        peg$c280 = peg$otherExpectation("anchor"),
        peg$c281 = function(value) {return value},
        peg$c282 = "https://datagen.di.uminho.pt",
        peg$c283 = peg$literalExpectation("https://datagen.di.uminho.pt", false),
        peg$c284 = "/schemas",
        peg$c285 = peg$literalExpectation("/schemas", false),
        peg$c286 = "/",
        peg$c287 = peg$literalExpectation("/", false),
        peg$c288 = /^[^\/#"]/,
        peg$c289 = peg$classExpectation(["/", "#", "\""], true, false),
        peg$c290 = function(id) {return id},
        peg$c291 = peg$otherExpectation("$ref"),
        peg$c292 = "/schemas/",
        peg$c293 = peg$literalExpectation("/schemas/", false),
        peg$c294 = function(ref) {if (current_key == "propertyNames") propertyNames_refs.push(ref); return ref},
        peg$c295 = /^[a-zA-Z]/,
        peg$c296 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c297 = /^[a-zA-Z0-9\-_:.]/,
        peg$c298 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_", ":", "."], false, false),
        peg$c299 = "#",
        peg$c300 = peg$literalExpectation("#", false),
        peg$c301 = "\"",
        peg$c302 = peg$literalExpectation("\"", false),
        peg$c303 = "\\",
        peg$c304 = peg$literalExpectation("\\", false),
        peg$c305 = "b",
        peg$c306 = peg$literalExpectation("b", false),
        peg$c307 = function() { return "\b"; },
        peg$c308 = "f",
        peg$c309 = peg$literalExpectation("f", false),
        peg$c310 = function() { return "\f"; },
        peg$c311 = "n",
        peg$c312 = peg$literalExpectation("n", false),
        peg$c313 = function() { return "\n"; },
        peg$c314 = "r",
        peg$c315 = peg$literalExpectation("r", false),
        peg$c316 = function() { return "\r"; },
        peg$c317 = "t",
        peg$c318 = peg$literalExpectation("t", false),
        peg$c319 = function() { return "\t"; },
        peg$c320 = "u",
        peg$c321 = peg$literalExpectation("u", false),
        peg$c322 = function(digits) {
                  return String.fromCharCode(parseInt(digits, 16));
                },
        peg$c323 = function(sequence) { return sequence; },
        peg$c324 = /^[^\0-\x1F"\\]/,
        peg$c325 = peg$classExpectation([["\0", "\x1F"], "\"", "\\"], true, false),
        peg$c326 = /^[0-9a-f]/i,
        peg$c327 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        peg$c328 = "_datagen",
        peg$c329 = peg$literalExpectation("_datagen", false),
        peg$c330 = function(key) {return {func: text(), type: "string"}},
        peg$c331 = function(key, func, args) {return {func, args}},
        peg$c332 = function(key, f) {return {key, value: {...f.func, args: f.args!==null ? f.args.replace(/'/g, '"') : "()"}}},
        peg$c333 = function(func) {return {func, type: "boolean"}},
        peg$c334 = "index",
        peg$c335 = peg$literalExpectation("index", false),
        peg$c336 = "integerOfSize",
        peg$c337 = peg$literalExpectation("integerOfSize", false),
        peg$c338 = function(func) {return {func, type: "integer"}},
        peg$c339 = "float",
        peg$c340 = peg$literalExpectation("float", false),
        peg$c341 = function(func) {return {func, type: "number"}},
        peg$c342 = "formattedInteger",
        peg$c343 = peg$literalExpectation("formattedInteger", false),
        peg$c344 = "formattedFloat",
        peg$c345 = peg$literalExpectation("formattedFloat", false),
        peg$c346 = "guid",
        peg$c347 = peg$literalExpectation("guid", false),
        peg$c348 = "hexBinary",
        peg$c349 = peg$literalExpectation("hexBinary", false),
        peg$c350 = "language",
        peg$c351 = peg$literalExpectation("language", false),
        peg$c352 = "letter",
        peg$c353 = peg$literalExpectation("letter", false),
        peg$c354 = "lorem",
        peg$c355 = peg$literalExpectation("lorem", false),
        peg$c356 = "objectID",
        peg$c357 = peg$literalExpectation("objectID", false),
        peg$c358 = "position",
        peg$c359 = peg$literalExpectation("position", false),
        peg$c360 = "pt_phone_number",
        peg$c361 = peg$literalExpectation("pt_phone_number", false),
        peg$c362 = "stringOfSize",
        peg$c363 = peg$literalExpectation("stringOfSize", false),
        peg$c364 = "xsd_dateTime",
        peg$c365 = peg$literalExpectation("xsd_dateTime", false),
        peg$c366 = "xsd_date",
        peg$c367 = peg$literalExpectation("xsd_date", false),
        peg$c368 = "xsd_duration",
        peg$c369 = peg$literalExpectation("xsd_duration", false),
        peg$c370 = "xsd_gDay",
        peg$c371 = peg$literalExpectation("xsd_gDay", false),
        peg$c372 = "xsd_gMonthDay",
        peg$c373 = peg$literalExpectation("xsd_gMonthDay", false),
        peg$c374 = "xsd_gMonth",
        peg$c375 = peg$literalExpectation("xsd_gMonth", false),
        peg$c376 = "xsd_gYearMonth",
        peg$c377 = peg$literalExpectation("xsd_gYearMonth", false),
        peg$c378 = "xsd_gYear",
        peg$c379 = peg$literalExpectation("xsd_gYear", false),
        peg$c380 = "xsd_string",
        peg$c381 = peg$literalExpectation("xsd_string", false),
        peg$c382 = "actor",
        peg$c383 = peg$literalExpectation("actor", false),
        peg$c384 = "animal",
        peg$c385 = peg$literalExpectation("animal", false),
        peg$c386 = "brand",
        peg$c387 = peg$literalExpectation("brand", false),
        peg$c388 = "buzzword",
        peg$c389 = peg$literalExpectation("buzzword", false),
        peg$c390 = "capital",
        peg$c391 = peg$literalExpectation("capital", false),
        peg$c392 = "car_brand",
        peg$c393 = peg$literalExpectation("car_brand", false),
        peg$c394 = "continent",
        peg$c395 = peg$literalExpectation("continent", false),
        peg$c396 = "country",
        peg$c397 = peg$literalExpectation("country", false),
        peg$c398 = "cultural_center",
        peg$c399 = peg$literalExpectation("cultural_center", false),
        peg$c400 = "firstName",
        peg$c401 = peg$literalExpectation("firstName", false),
        peg$c402 = "fullName",
        peg$c403 = peg$literalExpectation("fullName", false),
        peg$c404 = "gov_entity",
        peg$c405 = peg$literalExpectation("gov_entity", false),
        peg$c406 = "hacker",
        peg$c407 = peg$literalExpectation("hacker", false),
        peg$c408 = "job",
        peg$c409 = peg$literalExpectation("job", false),
        peg$c410 = "month",
        peg$c411 = peg$literalExpectation("month", false),
        peg$c412 = "musician",
        peg$c413 = peg$literalExpectation("musician", false),
        peg$c414 = "nationality",
        peg$c415 = peg$literalExpectation("nationality", false),
        peg$c416 = "political_party_abbr",
        peg$c417 = peg$literalExpectation("political_party_abbr", false),
        peg$c418 = "political_party_name",
        peg$c419 = peg$literalExpectation("political_party_name", false),
        peg$c420 = "pt_businessman",
        peg$c421 = peg$literalExpectation("pt_businessman", false),
        peg$c422 = "pt_city",
        peg$c423 = peg$literalExpectation("pt_city", false),
        peg$c424 = "pt_county",
        peg$c425 = peg$literalExpectation("pt_county", false),
        peg$c426 = "pt_district",
        peg$c427 = peg$literalExpectation("pt_district", false),
        peg$c428 = "pt_entity_abbr",
        peg$c429 = peg$literalExpectation("pt_entity_abbr", false),
        peg$c430 = "pt_entity_name",
        peg$c431 = peg$literalExpectation("pt_entity_name", false),
        peg$c432 = "pt_parish",
        peg$c433 = peg$literalExpectation("pt_parish", false),
        peg$c434 = "pt_politician",
        peg$c435 = peg$literalExpectation("pt_politician", false),
        peg$c436 = "pt_public_figure",
        peg$c437 = peg$literalExpectation("pt_public_figure", false),
        peg$c438 = "pt_top100_celebrity",
        peg$c439 = peg$literalExpectation("pt_top100_celebrity", false),
        peg$c440 = "religion",
        peg$c441 = peg$literalExpectation("religion", false),
        peg$c442 = "soccer_club",
        peg$c443 = peg$literalExpectation("soccer_club", false),
        peg$c444 = "soccer_player",
        peg$c445 = peg$literalExpectation("soccer_player", false),
        peg$c446 = "sport",
        peg$c447 = peg$literalExpectation("sport", false),
        peg$c448 = "surname",
        peg$c449 = peg$literalExpectation("surname", false),
        peg$c450 = "top100_celebrity",
        peg$c451 = peg$literalExpectation("top100_celebrity", false),
        peg$c452 = "weekday",
        peg$c453 = peg$literalExpectation("weekday", false),
        peg$c454 = "writer",
        peg$c455 = peg$literalExpectation("writer", false),
        peg$c456 = function(func) {return {func, type: "string"}},
        peg$c457 = "(",
        peg$c458 = peg$literalExpectation("(", false),
        peg$c459 = function() {return text()},
        peg$c460 = peg$anyExpectation(),
        peg$c461 = ")",
        peg$c462 = peg$literalExpectation(")", false),
        peg$c463 = "'",
        peg$c464 = peg$literalExpectation("'", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseDialect() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefalse();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseschema_object();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c1(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsebegin_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c2;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebegin_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c5;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_array() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s2 = peg$c7;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseend_object() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s2 = peg$c10;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsename_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalue_separator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c17.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c17.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0;

      s0 = peg$parseboolean();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenull();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobject();
          if (s0 === peg$FAILED) {
            s0 = peg$parsearray();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenumber();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestring();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseboolean() {
      var s0;

      s0 = peg$parsefalse();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetrue();
      }

      return s0;
    }

    function peg$parsefalse() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetrue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekeyword() {
      var s0;

      s0 = peg$parsedatagen_keyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsegeneric_keyword();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestring_keyword();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumber_keyword();
            if (s0 === peg$FAILED) {
              s0 = peg$parseobject_keyword();
              if (s0 === peg$FAILED) {
                s0 = peg$parsearray_keyword();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemedia_keyword();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseschemaComposition_keyword();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseconditionalSubschemas_keyword();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsestructuring_keyword();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegeneric_keyword() {
      var s0;

      s0 = peg$parsekw_type();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_enum();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_const();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_default();
            if (s0 === peg$FAILED) {
              s0 = peg$parseannotation_keyword();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekw_type() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c28) {
          s2 = peg$c28;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetype_value();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetype_value() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetype();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsetype_array();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetype() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c33) {
          s3 = peg$c33;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c35) {
            s3 = peg$c35;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c37) {
              s3 = peg$c37;
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c39) {
                s3 = peg$c39;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c41) {
                  s3 = peg$c41;
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c42); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c43) {
                    s3 = peg$c43;
                    peg$currPos += 7;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c44); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c22) {
                      s3 = peg$c22;
                      peg$currPos += 4;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c23); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c45(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_enum() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c46) {
          s2 = peg$c46;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsearray();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_const() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c48) {
          s2 = peg$c48;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevalue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c50(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_default() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c51) {
          s2 = peg$c51;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsevalue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c50(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseannotation_keyword() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekws_annotation_stringValues();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekw_examples();
        if (s1 === peg$FAILED) {
          s1 = peg$parsekws_annotation_booleanValues();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c53();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekws_annotation_stringValues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c54) {
          s3 = peg$c54;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c56) {
            s3 = peg$c56;
            peg$currPos += 11;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c57); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c58) {
              s3 = peg$c58;
              peg$currPos += 8;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c59); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_examples() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c60) {
          s2 = peg$c60;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsearray();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_annotation_booleanValues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c62) {
          s3 = peg$c62;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c66) {
              s3 = peg$c66;
              peg$currPos += 10;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseboolean();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestring_keyword() {
      var s0;

      s0 = peg$parsekws_string_length();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_pattern();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_format();
        }
      }

      return s0;
    }

    function peg$parsekws_string_length() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c68) {
          s3 = peg$c68;
          peg$currPos += 9;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c70) {
            s3 = peg$c70;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c71); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_pattern() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c72) {
          s2 = peg$c72;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepattern_string();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_format() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c74) {
          s2 = peg$c74;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseformat_value();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseformat_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c76) {
          s2 = peg$c76;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c78) {
            s2 = peg$c78;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c80) {
              s2 = peg$c80;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c81); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c82) {
                s2 = peg$c82;
                peg$currPos += 8;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c83); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c84) {
                  s2 = peg$c84;
                  peg$currPos += 5;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c85); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c86) {
                    s2 = peg$c86;
                    peg$currPos += 9;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c87); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c88) {
                      s2 = peg$c88;
                      peg$currPos += 8;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c89); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 12) === peg$c90) {
                        s2 = peg$c90;
                        peg$currPos += 12;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c91); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c92) {
                          s2 = peg$c92;
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c93); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c94) {
                            s2 = peg$c94;
                            peg$currPos += 4;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c95); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c96) {
                              s2 = peg$c96;
                              peg$currPos += 4;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c97); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 13) === peg$c98) {
                                s2 = peg$c98;
                                peg$currPos += 13;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c99); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 12) === peg$c100) {
                                  s2 = peg$c100;
                                  peg$currPos += 12;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c101); }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3) === peg$c102) {
                                    s2 = peg$c102;
                                    peg$currPos += 3;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 13) === peg$c104) {
                                      s2 = peg$c104;
                                      peg$currPos += 13;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c106) {
                                        s2 = peg$c106;
                                        peg$currPos += 3;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                      }
                                      if (s2 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 12) === peg$c108) {
                                          s2 = peg$c108;
                                          peg$currPos += 12;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                        }
                                        if (s2 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 21) === peg$c110) {
                                            s2 = peg$c110;
                                            peg$currPos += 21;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                          }
                                          if (s2 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c112) {
                                              s2 = peg$c112;
                                              peg$currPos += 5;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c114(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber_keyword() {
      var s0;

      s0 = peg$parsekw_multipleOf();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekws_range();
      }

      return s0;
    }

    function peg$parsekw_multipleOf() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c115) {
          s2 = peg$c115;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepositiveNumber();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c50(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_range() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c117) {
          s3 = peg$c117;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 16) === peg$c119) {
            s3 = peg$c119;
            peg$currPos += 16;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c121) {
              s3 = peg$c121;
              peg$currPos += 7;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c122); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 16) === peg$c123) {
                s3 = peg$c123;
                peg$currPos += 16;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c124); }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseobject_keyword() {
      var s0;

      s0 = peg$parsekws_props();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_moreProps();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_requiredProps();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_propertyNames();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekws_size();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekws_props() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 17) === peg$c125) {
          s3 = peg$c125;
          peg$currPos += 17;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c127) {
            s3 = peg$c127;
            peg$currPos += 10;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c128); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_schemaMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c129(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c30(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_moreProps() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 20) === peg$c130) {
          s3 = peg$c130;
          peg$currPos += 20;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 21) === peg$c132) {
            s3 = peg$c132;
            peg$currPos += 21;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c133); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_requiredProps() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c134) {
          s2 = peg$c134;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring_array();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_propertyNames() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 13) === peg$c136) {
          s4 = peg$c136;
          peg$currPos += 13;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c138();
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c139(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c140(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_size() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 13) === peg$c141) {
          s3 = peg$c141;
          peg$currPos += 13;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c142); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c143) {
            s3 = peg$c143;
            peg$currPos += 13;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c144); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsearray_keyword() {
      var s0;

      s0 = peg$parsekw_items();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_prefixItems();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_unevaluatedItems();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_contains();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekws_mContains();
              if (s0 === peg$FAILED) {
                s0 = peg$parsekws_array_length();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsekw_uniqueness();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekw_items() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c145) {
          s2 = peg$c145;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c146); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_prefixItems() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c147) {
          s2 = peg$c147;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c148); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_array();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_unevaluatedItems() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c149) {
          s2 = peg$c149;
          peg$currPos += 16;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c150); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_contains() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c151) {
          s2 = peg$c151;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c153(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c30(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_mContains() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c154) {
          s3 = peg$c154;
          peg$currPos += 11;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c155); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c156) {
            s3 = peg$c156;
            peg$currPos += 11;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c157); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekws_array_length() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c158) {
          s3 = peg$c158;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c160) {
            s3 = peg$c160;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c161); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseint();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_uniqueness() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c162) {
          s2 = peg$c162;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c163); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseboolean();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemedia_keyword() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekw_contentMediaType();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekw_contentEncoding();
        if (s1 === peg$FAILED) {
          s1 = peg$parsekw_contentSchema();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c53();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekw_contentMediaType() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c164) {
          s2 = peg$c164;
          peg$currPos += 16;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestring();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_contentEncoding() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 15) === peg$c166) {
          s2 = peg$c166;
          peg$currPos += 15;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseencoding();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseencoding() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c168) {
          s3 = peg$c168;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c169); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c170) {
            s3 = peg$c170;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c171); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c172) {
              s3 = peg$c172;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c173); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 16) === peg$c174) {
                s3 = peg$c174;
                peg$currPos += 16;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c175); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c176) {
                  s3 = peg$c176;
                  peg$currPos += 6;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c178) {
                    s3 = peg$c178;
                    peg$currPos += 6;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c180) {
                      s3 = peg$c180;
                      peg$currPos += 6;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c181); }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c182(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_contentSchema() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c183) {
          s2 = peg$c183;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschemaComposition_keyword() {
      var s0;

      s0 = peg$parsekws_combineSchemas();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_notSchema();
      }

      return s0;
    }

    function peg$parsekws_combineSchemas() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c185) {
          s3 = peg$c185;
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c186); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c187) {
            s3 = peg$c187;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c188); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c189) {
              s3 = peg$c189;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c190); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_array();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c191(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c30(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_notSchema() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c192) {
          s4 = peg$c192;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c193); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c194();
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c195(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconditionalSubschemas_keyword() {
      var s0;

      s0 = peg$parsekw_dependentRequired();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_dependentSchemas();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_ifThenElse();
        }
      }

      return s0;
    }

    function peg$parsekw_dependentRequired() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 17) === peg$c196) {
          s2 = peg$c196;
          peg$currPos += 17;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c197); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_arrayOfStringsMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_dependentSchemas() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c198) {
          s2 = peg$c198;
          peg$currPos += 16;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c199); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_schemaMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c129(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c30(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_ifThenElse() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c200) {
          s4 = peg$c200;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c201); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c202) {
            s4 = peg$c202;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c203); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c204) {
              s4 = peg$c204;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c205); }
            }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c206(s4);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_object();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c207(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c195(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestructuring_keyword() {
      var s0;

      s0 = peg$parsekw_schema();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekw_id();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekw_anchor();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekw_ref();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekw_defs();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekw_schema() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c208) {
          s2 = peg$c208;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_value();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c210(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c211(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_value() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 30) === peg$c212) {
          s4 = peg$c212;
          peg$currPos += 30;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c213); }
        }
        if (s4 !== peg$FAILED) {
          if (peg$c214.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c215); }
          }
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c216) {
              s6 = peg$c216;
              peg$currPos += 8;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c217); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 32) === peg$c218) {
            s4 = peg$c218;
            peg$currPos += 32;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c219); }
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c220) {
              s5 = peg$c220;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c221); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c222) {
                s5 = peg$c222;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c223); }
              }
            }
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c224) {
                s6 = peg$c224;
                peg$currPos += 7;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c225); }
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s4 = peg$c226(s2);
            if (s4) {
              s4 = void 0;
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c45(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_id() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c227) {
          s2 = peg$c227;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_id();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c229(s2, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c230(s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_anchor() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c231) {
          s2 = peg$c231;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c232); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseanchor();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_ref() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c233) {
          s2 = peg$c233;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c234); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseschema_ref();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekw_defs() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c235) {
          s2 = peg$c235;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseobject_schemaMap();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_object() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseboolean();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c237(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c238();
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsekeyword();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsekeyword();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c239(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsevalue_separator();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsekeyword();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c239(s3, s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c240(s3, s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c10;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c241(s2);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s4 = peg$c242(s2);
              if (s4) {
                s4 = void 0;
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c243(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseobject() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsemember();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsemember();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c239(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsemember();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c239(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c244(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c245(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemember() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevalue();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c246(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseobject_schemaMap() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseschema_member();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseschema_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c239(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseschema_member();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c239(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c244(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c245(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_member() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseschema_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c246(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseobject_arrayOfStringsMap() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsebegin_object();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsearrayOfStrings_member();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsearrayOfStrings_member();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c239(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsearrayOfStrings_member();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c239(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c244(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_object();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c245(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsearrayOfStrings_member() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsestring();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsename_separator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestring_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c246(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsearray() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsevalue();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsevalue();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c248(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsevalue();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c248(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c249(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c250(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }

      return s0;
    }

    function peg$parsestring_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsestring();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsestring();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c248(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestring();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c248(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c249(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c250(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c251); }
      }

      return s0;
    }

    function peg$parseschema_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseschema_object();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseschema_object();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c248(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseschema_object();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c248(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c249(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c250(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }

      return s0;
    }

    function peg$parsetype_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebegin_array();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsetype();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsevalue_separator();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetype();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c248(s3, s7);
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsevalue_separator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetype();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c248(s3, s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c254(s3, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseend_array();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c255(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c253); }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c257;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefrac();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c259();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c256); }
      }

      return s0;
    }

    function peg$parsepositiveNumber() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s2 = peg$c261;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c262); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefrac();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (peg$c263.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c264); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c265.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c266); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c265.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c266); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsefrac();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c259();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }

      return s0;
    }

    function peg$parseexp() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (peg$c267.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c268); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c257;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c258); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s2 = peg$c269;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c270); }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c265.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c266); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c265.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c266); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefrac() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c271;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c272); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c265.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c266); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c265.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c266); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 48) {
        s3 = peg$c261;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c262); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c261;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c262); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (peg$c263.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c264); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c265.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c266); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c265.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c266); }
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c274(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c261;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c262); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (input.charCodeAt(peg$currPos) === 48) {
            s4 = peg$c261;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c262); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 48) {
              s4 = peg$c261;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c262); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c274(s2);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c275(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsechar();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsechar();
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c277(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c276); }
      }

      return s0;
    }

    function peg$parsepattern_string() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c278.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c279); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c278.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c279); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c277(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseanchor() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanchor_value();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c281(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c280); }
      }

      return s0;
    }

    function peg$parseschema_id() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 28) === peg$c282) {
          s2 = peg$c282;
          peg$currPos += 28;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c283); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c284) {
            s5 = peg$c284;
            peg$currPos += 8;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c285); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
              s8 = peg$c286;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c287); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              if (peg$c288.test(input.charAt(peg$currPos))) {
                s10 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c289); }
              }
              if (s10 !== peg$FAILED) {
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  if (peg$c288.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c289); }
                  }
                }
              } else {
                s9 = peg$FAILED;
              }
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 47) {
                  s8 = peg$c286;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c287); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  if (peg$c288.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c289); }
                  }
                  if (s10 !== peg$FAILED) {
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      if (peg$c288.test(input.charAt(peg$currPos))) {
                        s10 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c289); }
                      }
                    }
                  } else {
                    s9 = peg$FAILED;
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseQM();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c290(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_ref() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 28) === peg$c282) {
          s2 = peg$c282;
          peg$currPos += 28;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c283); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          s5 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c292) {
            s6 = peg$c292;
            peg$currPos += 9;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c293); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            if (peg$c288.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c289); }
            }
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                if (peg$c288.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c289); }
                }
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseref_segment();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c292) {
              s5 = peg$c292;
              peg$currPos += 9;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c293); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c288.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c289); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c288.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c289); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseQM();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c294(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }

      return s0;
    }

    function peg$parseanchor_value() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c295.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c297.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c298); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c297.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseref_segment() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c299;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseanchor_value();
        if (s2 === peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c286;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c287); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c288.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c289); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c288.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c289); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
              s4 = peg$c286;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c287); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c288.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c289); }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c288.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c289); }
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$parseunescaped();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseescape();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c301;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c302); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c303;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c304); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c286;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c287); }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c305;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c306); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c307();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c308;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c309); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c310();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c311;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c312); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c313();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c314;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c315); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c316();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c317;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c318); }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c319();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c320;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c321); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$currPos;
                            s6 = peg$parseHEXDIG();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG();
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos);
                            } else {
                              s4 = s5;
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c322(s4);
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c323(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseescape() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c303;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c304); }
      }

      return s0;
    }

    function peg$parseQM() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c301;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }

      return s0;
    }

    function peg$parseunescaped() {
      var s0;

      if (peg$c324.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c325); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c326.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c327); }
      }

      return s0;
    }

    function peg$parsedatagen_keyword() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseQM();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c328) {
          s2 = peg$c328;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c329); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseQM();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsename_separator();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQM();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c72) {
                  s8 = peg$c72;
                  peg$currPos += 7;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c73); }
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s8 = peg$c330(s2);
                }
                s7 = s8;
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsepattern_arg();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c331(s2, s7, s8);
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parsedatagen_func();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsedatagen_args();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s6;
                      s7 = peg$c331(s2, s7, s8);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQM();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c332(s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedatagen_func() {
      var s0;

      s0 = peg$parsedatagen_boolean();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedatagen_integer();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedatagen_float();
          if (s0 === peg$FAILED) {
            s0 = peg$parsedatagen_string();
          }
        }
      }

      return s0;
    }

    function peg$parsedatagen_boolean() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c43) {
        s1 = peg$c43;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c333(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatagen_integer() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c334) {
        s1 = peg$c334;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c335); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c336) {
          s1 = peg$c336;
          peg$currPos += 13;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c37) {
            s1 = peg$c37;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c338(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatagen_float() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c339) {
        s1 = peg$c339;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c115) {
          s1 = peg$c115;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c341(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatagen_string() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c342) {
          s1 = peg$c342;
          peg$currPos += 16;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c343); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 14) === peg$c344) {
            s1 = peg$c344;
            peg$currPos += 14;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c345); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c346) {
              s1 = peg$c346;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c347); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c348) {
                s1 = peg$c348;
                peg$currPos += 9;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c349); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c350) {
                  s1 = peg$c350;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c351); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c352) {
                    s1 = peg$c352;
                    peg$currPos += 6;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c353); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c354) {
                      s1 = peg$c354;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c355); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c356) {
                        s1 = peg$c356;
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c357); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c358) {
                          s1 = peg$c358;
                          peg$currPos += 8;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c359); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 15) === peg$c360) {
                            s1 = peg$c360;
                            peg$currPos += 15;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c361); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 12) === peg$c362) {
                              s1 = peg$c362;
                              peg$currPos += 12;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c363); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c78) {
                                s1 = peg$c78;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c79); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 12) === peg$c364) {
                                  s1 = peg$c364;
                                  peg$currPos += 12;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c365); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 8) === peg$c366) {
                                    s1 = peg$c366;
                                    peg$currPos += 8;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c367); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 12) === peg$c368) {
                                      s1 = peg$c368;
                                      peg$currPos += 12;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c369); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 8) === peg$c370) {
                                        s1 = peg$c370;
                                        peg$currPos += 8;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c371); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 13) === peg$c372) {
                                          s1 = peg$c372;
                                          peg$currPos += 13;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c373); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 10) === peg$c374) {
                                            s1 = peg$c374;
                                            peg$currPos += 10;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c375); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 14) === peg$c376) {
                                              s1 = peg$c376;
                                              peg$currPos += 14;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c377); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 9) === peg$c378) {
                                                s1 = peg$c378;
                                                peg$currPos += 9;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c379); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 10) === peg$c380) {
                                                  s1 = peg$c380;
                                                  peg$currPos += 10;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c381); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 5) === peg$c382) {
                                                    s1 = peg$c382;
                                                    peg$currPos += 5;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c383); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 6) === peg$c384) {
                                                      s1 = peg$c384;
                                                      peg$currPos += 6;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c385); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 5) === peg$c386) {
                                                        s1 = peg$c386;
                                                        peg$currPos += 5;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c387); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 8) === peg$c388) {
                                                          s1 = peg$c388;
                                                          peg$currPos += 8;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c389); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 7) === peg$c390) {
                                                            s1 = peg$c390;
                                                            peg$currPos += 7;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c391); }
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 9) === peg$c392) {
                                                              s1 = peg$c392;
                                                              peg$currPos += 9;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c393); }
                                                            }
                                                            if (s1 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 9) === peg$c394) {
                                                                s1 = peg$c394;
                                                                peg$currPos += 9;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c395); }
                                                              }
                                                              if (s1 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 7) === peg$c396) {
                                                                  s1 = peg$c396;
                                                                  peg$currPos += 7;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c397); }
                                                                }
                                                                if (s1 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 15) === peg$c398) {
                                                                    s1 = peg$c398;
                                                                    peg$currPos += 15;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c399); }
                                                                  }
                                                                  if (s1 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 9) === peg$c400) {
                                                                      s1 = peg$c400;
                                                                      peg$currPos += 9;
                                                                    } else {
                                                                      s1 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c401); }
                                                                    }
                                                                    if (s1 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 8) === peg$c402) {
                                                                        s1 = peg$c402;
                                                                        peg$currPos += 8;
                                                                      } else {
                                                                        s1 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c403); }
                                                                      }
                                                                      if (s1 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 10) === peg$c404) {
                                                                          s1 = peg$c404;
                                                                          peg$currPos += 10;
                                                                        } else {
                                                                          s1 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c405); }
                                                                        }
                                                                        if (s1 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 6) === peg$c406) {
                                                                            s1 = peg$c406;
                                                                            peg$currPos += 6;
                                                                          } else {
                                                                            s1 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c407); }
                                                                          }
                                                                          if (s1 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 3) === peg$c408) {
                                                                              s1 = peg$c408;
                                                                              peg$currPos += 3;
                                                                            } else {
                                                                              s1 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c409); }
                                                                            }
                                                                            if (s1 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 5) === peg$c410) {
                                                                                s1 = peg$c410;
                                                                                peg$currPos += 5;
                                                                              } else {
                                                                                s1 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c411); }
                                                                              }
                                                                              if (s1 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 8) === peg$c412) {
                                                                                  s1 = peg$c412;
                                                                                  peg$currPos += 8;
                                                                                } else {
                                                                                  s1 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c413); }
                                                                                }
                                                                                if (s1 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 11) === peg$c414) {
                                                                                    s1 = peg$c414;
                                                                                    peg$currPos += 11;
                                                                                  } else {
                                                                                    s1 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c415); }
                                                                                  }
                                                                                  if (s1 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 20) === peg$c416) {
                                                                                      s1 = peg$c416;
                                                                                      peg$currPos += 20;
                                                                                    } else {
                                                                                      s1 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c417); }
                                                                                    }
                                                                                    if (s1 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 20) === peg$c418) {
                                                                                        s1 = peg$c418;
                                                                                        peg$currPos += 20;
                                                                                      } else {
                                                                                        s1 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c419); }
                                                                                      }
                                                                                      if (s1 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 14) === peg$c420) {
                                                                                          s1 = peg$c420;
                                                                                          peg$currPos += 14;
                                                                                        } else {
                                                                                          s1 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c421); }
                                                                                        }
                                                                                        if (s1 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 7) === peg$c422) {
                                                                                            s1 = peg$c422;
                                                                                            peg$currPos += 7;
                                                                                          } else {
                                                                                            s1 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c423); }
                                                                                          }
                                                                                          if (s1 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 9) === peg$c424) {
                                                                                              s1 = peg$c424;
                                                                                              peg$currPos += 9;
                                                                                            } else {
                                                                                              s1 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c425); }
                                                                                            }
                                                                                            if (s1 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 11) === peg$c426) {
                                                                                                s1 = peg$c426;
                                                                                                peg$currPos += 11;
                                                                                              } else {
                                                                                                s1 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c427); }
                                                                                              }
                                                                                              if (s1 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 14) === peg$c428) {
                                                                                                  s1 = peg$c428;
                                                                                                  peg$currPos += 14;
                                                                                                } else {
                                                                                                  s1 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c429); }
                                                                                                }
                                                                                                if (s1 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 14) === peg$c430) {
                                                                                                    s1 = peg$c430;
                                                                                                    peg$currPos += 14;
                                                                                                  } else {
                                                                                                    s1 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c431); }
                                                                                                  }
                                                                                                  if (s1 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 9) === peg$c432) {
                                                                                                      s1 = peg$c432;
                                                                                                      peg$currPos += 9;
                                                                                                    } else {
                                                                                                      s1 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c433); }
                                                                                                    }
                                                                                                    if (s1 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 13) === peg$c434) {
                                                                                                        s1 = peg$c434;
                                                                                                        peg$currPos += 13;
                                                                                                      } else {
                                                                                                        s1 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c435); }
                                                                                                      }
                                                                                                      if (s1 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 16) === peg$c436) {
                                                                                                          s1 = peg$c436;
                                                                                                          peg$currPos += 16;
                                                                                                        } else {
                                                                                                          s1 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c437); }
                                                                                                        }
                                                                                                        if (s1 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 19) === peg$c438) {
                                                                                                            s1 = peg$c438;
                                                                                                            peg$currPos += 19;
                                                                                                          } else {
                                                                                                            s1 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c439); }
                                                                                                          }
                                                                                                          if (s1 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 8) === peg$c440) {
                                                                                                              s1 = peg$c440;
                                                                                                              peg$currPos += 8;
                                                                                                            } else {
                                                                                                              s1 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c441); }
                                                                                                            }
                                                                                                            if (s1 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 11) === peg$c442) {
                                                                                                                s1 = peg$c442;
                                                                                                                peg$currPos += 11;
                                                                                                              } else {
                                                                                                                s1 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c443); }
                                                                                                              }
                                                                                                              if (s1 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 13) === peg$c444) {
                                                                                                                  s1 = peg$c444;
                                                                                                                  peg$currPos += 13;
                                                                                                                } else {
                                                                                                                  s1 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c445); }
                                                                                                                }
                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 5) === peg$c446) {
                                                                                                                    s1 = peg$c446;
                                                                                                                    peg$currPos += 5;
                                                                                                                  } else {
                                                                                                                    s1 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c447); }
                                                                                                                  }
                                                                                                                  if (s1 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 7) === peg$c448) {
                                                                                                                      s1 = peg$c448;
                                                                                                                      peg$currPos += 7;
                                                                                                                    } else {
                                                                                                                      s1 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c449); }
                                                                                                                    }
                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 16) === peg$c450) {
                                                                                                                        s1 = peg$c450;
                                                                                                                        peg$currPos += 16;
                                                                                                                      } else {
                                                                                                                        s1 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c451); }
                                                                                                                      }
                                                                                                                      if (s1 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 7) === peg$c452) {
                                                                                                                          s1 = peg$c452;
                                                                                                                          peg$currPos += 7;
                                                                                                                        } else {
                                                                                                                          s1 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c453); }
                                                                                                                        }
                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 6) === peg$c454) {
                                                                                                                            s1 = peg$c454;
                                                                                                                            peg$currPos += 6;
                                                                                                                          } else {
                                                                                                                            s1 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c455); }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c456(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedatagen_args() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c457;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c458); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedatagen_args_content();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedatagen_args_close();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c459();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedatagen_args_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsedatagen_args_close();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c460); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedatagen_args_content();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedatagen_args_content();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedatagen_args_close() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c461;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c462); }
      }

      return s0;
    }

    function peg$parsepattern_arg() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c457;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c458); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c463;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c464); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepattern_arg_content();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepattern_arg_close();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c459();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepattern_arg_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsepattern_arg_close();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c460); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsepattern_arg_content();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsepattern_arg_content();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepattern_arg_close() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c463;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c464); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c461;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c462); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }


      let depth = []
      let current_key = ""
      let ids = []
      let subschemas = []
      let anon_schemas = 0
      let refs = []
      let anchors = []
      let propertyNames_refs = []

      // chave só permitida na raiz
      const atRoot = kw => !depth[depth.length-1] ? true : error(`A chave <b>${kw}</b> só é permitida ao nível da raiz da (sub)schema!`)
      // todos os ids devem ser únicos
      const newId = id => !ids.includes(id) ? true : error(`Todas as propriedades <b>$id</b> devem ser únicas! Há mais do que uma (sub)schema cujo <b>$id</b> é <i>${id}</i>.`)


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();