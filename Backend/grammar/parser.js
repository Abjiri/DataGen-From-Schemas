module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { DSL_text: peg$parseDSL_text },
        peg$startRuleFunction  = peg$parseDSL_text,

        peg$c0 = function(xsd) { return {xsd, simpleTypes} },
        peg$c1 = peg$otherExpectation("whitespace"),
        peg$c2 = /^[ \t\n\r]/,
        peg$c3 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        peg$c4 = "<?xml",
        peg$c5 = peg$literalExpectation("<?xml", false),
        peg$c6 = "?>",
        peg$c7 = peg$literalExpectation("?>", false),
        peg$c8 = "version",
        peg$c9 = peg$literalExpectation("version", false),
        peg$c10 = "=",
        peg$c11 = peg$literalExpectation("=", false),
        peg$c12 = "1.0",
        peg$c13 = peg$literalExpectation("1.0", false),
        peg$c14 = function(q1, q2) {return checkQM(q1,q2,null,null)},
        peg$c15 = "encoding",
        peg$c16 = peg$literalExpectation("encoding", false),
        peg$c17 = "UTF-",
        peg$c18 = peg$literalExpectation("UTF-", false),
        peg$c19 = "8",
        peg$c20 = peg$literalExpectation("8", false),
        peg$c21 = "16",
        peg$c22 = peg$literalExpectation("16", false),
        peg$c23 = "ISO-10646-UCS-",
        peg$c24 = peg$literalExpectation("ISO-10646-UCS-", false),
        peg$c25 = "2",
        peg$c26 = peg$literalExpectation("2", false),
        peg$c27 = "4",
        peg$c28 = peg$literalExpectation("4", false),
        peg$c29 = "ISO-8859-",
        peg$c30 = peg$literalExpectation("ISO-8859-", false),
        peg$c31 = /^[1-9]/,
        peg$c32 = peg$classExpectation([["1", "9"]], false, false),
        peg$c33 = "ISO-2022-JP",
        peg$c34 = peg$literalExpectation("ISO-2022-JP", false),
        peg$c35 = "Shift_JIS",
        peg$c36 = peg$literalExpectation("Shift_JIS", false),
        peg$c37 = "EUC-JP",
        peg$c38 = peg$literalExpectation("EUC-JP", false),
        peg$c39 = "standalone",
        peg$c40 = peg$literalExpectation("standalone", false),
        peg$c41 = "yes",
        peg$c42 = peg$literalExpectation("yes", false),
        peg$c43 = "no",
        peg$c44 = peg$literalExpectation("no", false),
        peg$c45 = function(p) {default_prefix = p},
        peg$c46 = "schema",
        peg$c47 = peg$literalExpectation("schema", false),
        peg$c48 = ">",
        peg$c49 = peg$literalExpectation(">", false),
        peg$c50 = function(el_name, attrs, content) {return checkQueue()},
        peg$c51 = function(el_name, attrs, content) {
          content = complete_refs(content, content)
          return {element: el_name, prefix: default_prefix, attrs, content: content.filter(x => x.element == "element")}
        },
        peg$c52 = function(prefix) {
          if (!noSchemaPrefix() && prefix === null) return error("Precisa de prefixar o elemento de fecho da schema!")
          if (noSchemaPrefix() && prefix !== null) return error("Não pode usar um prefixo aqui porque não predefiniu um prefixo para o namespace da schema!")
          if (prefix !== default_prefix) return error ("Precisa de prefixar o elemento de fecho da schema com o prefixo predefinido do seu namespace!")
          return true
        },
        peg$c53 = function(attrs) {return check_schemaAttrs(attrs)},
        peg$c54 = function(attrs) {return attrs},
        peg$c55 = "attribute",
        peg$c56 = peg$literalExpectation("attribute", false),
        peg$c57 = "element",
        peg$c58 = peg$literalExpectation("element", false),
        peg$c59 = "FormDefault",
        peg$c60 = peg$literalExpectation("FormDefault", false),
        peg$c61 = function(attr, q1, val, q2) {return checkQM(q1,q2,attr,val)},
        peg$c62 = "blockDefault",
        peg$c63 = peg$literalExpectation("blockDefault", false),
        peg$c64 = "finalDefault",
        peg$c65 = peg$literalExpectation("finalDefault", false),
        peg$c66 = "xmlns",
        peg$c67 = peg$literalExpectation("xmlns", false),
        peg$c68 = ":",
        peg$c69 = peg$literalExpectation(":", false),
        peg$c70 = function(p) {return p},
        peg$c71 = function(prefix, val) {prefixes.push(prefix); return {attr: "namespace", prefix, val}},
        peg$c72 = function(attr, val) {return {attr, val: val.trim().replace(/[\t\n\r]/g," ").replace(/ +/g," ")}},
        peg$c73 = "targetNamespace",
        peg$c74 = peg$literalExpectation("targetNamespace", false),
        peg$c75 = function(attr, val) {return {attr, val}},
        peg$c76 = function(el) {return cleanContent(el.flat(3))},
        peg$c77 = "include",
        peg$c78 = peg$literalExpectation("include", false),
        peg$c79 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close)},
        peg$c80 = function(prefix, el_name, attrs, close) {return {element: el_name, attrs, content: close.content}},
        peg$c81 = function(el) {return check_requiredAttr(getAttrs(el), "include", "schemaLocation")},
        peg$c82 = "schemaLocation",
        peg$c83 = peg$literalExpectation("schemaLocation", false),
        peg$c84 = "import",
        peg$c85 = peg$literalExpectation("import", false),
        peg$c86 = function(el) {return check_repeatedAttrs(el, getAttrs(el), "import")},
        peg$c87 = "namespace",
        peg$c88 = peg$literalExpectation("namespace", false),
        peg$c89 = "redefine",
        peg$c90 = peg$literalExpectation("redefine", false),
        peg$c91 = function(prefix) {curr.redefine = true},
        peg$c92 = function(prefix, el_name, attrs, content, close_el) {return {merged: false, ...close_el, content}},
        peg$c93 = function(prefix, el_name, attrs, close) {curr.redefine = false; return {element: el_name, attrs, content: close.content}},
        peg$c94 = function(c) {return cleanContent(c)},
        peg$c95 = function(prefix) {any_type = "BSC"; curr.element = true},
        peg$c96 = function(prefix, el_name, attrs, close) {
          if ((close.merged || !close.content.length) && !validateLocalEl(attrs)) return error("Um elemento local deve ter, pelo menos, o atributo 'name' ou 'ref'!")
          return check_elTags(el_name, prefix, close) && check_elemMutex(attrs, close.content)
        },
        peg$c97 = function(el) {curr.element = false; return check_elemAttrs(el)},
        peg$c98 = "abstract",
        peg$c99 = peg$literalExpectation("abstract", false),
        peg$c100 = "block",
        peg$c101 = peg$literalExpectation("block", false),
        peg$c102 = "default",
        peg$c103 = peg$literalExpectation("default", false),
        peg$c104 = function(attr, val) {return {attr,val}},
        peg$c105 = "final",
        peg$c106 = peg$literalExpectation("final", false),
        peg$c107 = "fixed",
        peg$c108 = peg$literalExpectation("fixed", false),
        peg$c109 = "form",
        peg$c110 = peg$literalExpectation("form", false),
        peg$c111 = "id",
        peg$c112 = peg$literalExpectation("id", false),
        peg$c113 = "maxOccurs",
        peg$c114 = peg$literalExpectation("maxOccurs", false),
        peg$c115 = "unbounded",
        peg$c116 = peg$literalExpectation("unbounded", false),
        peg$c117 = "minOccurs",
        peg$c118 = peg$literalExpectation("minOccurs", false),
        peg$c119 = "name",
        peg$c120 = peg$literalExpectation("name", false),
        peg$c121 = function(attr, q1, val, q2) {return validateName(val,"element")},
        peg$c122 = "nillable",
        peg$c123 = peg$literalExpectation("nillable", false),
        peg$c124 = "xml:lang",
        peg$c125 = peg$literalExpectation("xml:lang", false),
        peg$c126 = "ref",
        peg$c127 = peg$literalExpectation("ref", false),
        peg$c128 = function(attr, q1, val, q2) {queue.push({attr: "ref", args: [val, "element"]}); return checkQM(q1,q2,attr,val)},
        peg$c129 = "source",
        peg$c130 = peg$literalExpectation("source", false),
        peg$c131 = "substitutionGroup",
        peg$c132 = peg$literalExpectation("substitutionGroup", false),
        peg$c133 = "type",
        peg$c134 = peg$literalExpectation("type", false),
        peg$c135 = function(c) {return cleanContent(c.flat())},
        peg$c136 = "field",
        peg$c137 = peg$literalExpectation("field", false),
        peg$c138 = function(attrs) {return check_requiredAttr(getAttrs(attrs), "field", "xpath")},
        peg$c139 = "xpath",
        peg$c140 = peg$literalExpectation("xpath", false),
        peg$c141 = "selector",
        peg$c142 = peg$literalExpectation("selector", false),
        peg$c143 = function(attrs) {return check_requiredAttr(getAttrs(attrs), "selector", "xpath")},
        peg$c144 = "key",
        peg$c145 = peg$literalExpectation("key", false),
        peg$c146 = "unique",
        peg$c147 = peg$literalExpectation("unique", false),
        peg$c148 = function(prefix, el_name, a) {return check_requiredAttr(a, el_name, "name") && validateName(a.name, el_name)},
        peg$c149 = function(prefix, el_name, a) {return a},
        peg$c150 = function(attrs) {return getAttrs(attrs)},
        peg$c151 = "keyref",
        peg$c152 = peg$literalExpectation("keyref", false),
        peg$c153 = function(prefix, el_name, a) {return validateName(a.name, el_name)},
        peg$c154 = function(attrs) {return check_keyrefAttrs(attrs)},
        peg$c155 = "refer",
        peg$c156 = peg$literalExpectation("refer", false),
        peg$c157 = function(prefix) {any_type = "BS"},
        peg$c158 = function(prefix, el_name, attrs, close) {
          if ((close.merged || !close.content.length) && !validateLocalEl(attrs)) return error("Um atributo local deve ter, pelo menos, o atributo 'name' ou 'ref'!")
          return check_elTags(el_name, prefix, close) && check_attrMutex(attrs, close.content)
        },
        peg$c159 = function(el) {any_type = "BSC"; return check_attributeElAttrs(el,"attribute")},
        peg$c160 = function(attr, q1, val, q2) {return validateName(val,"attribute")},
        peg$c161 = function(attr, q1, val, q2) {queue.push({attr: "ref", args: [val, "attribute"]}); return checkQM(q1,q2,attr,val)},
        peg$c162 = "use",
        peg$c163 = peg$literalExpectation("use", false),
        peg$c164 = "attributeGroup",
        peg$c165 = peg$literalExpectation("attributeGroup", false),
        peg$c166 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close) && check_attrGroupMutex(attrs, close.content) && check_repeatedNames(el_name, "attribute", close.content)},
        peg$c167 = function(el) {return check_attributeElAttrs(el,"attributeGroup")},
        peg$c168 = function(attr, q1, val, q2) {return validateName(val,"attributeGroup")},
        peg$c169 = function(attr, q1, val, q2) {queue.push({attr: "ref", args: [val, "attributeGroup"]}); return checkQM(q1,q2,attr,val)},
        peg$c170 = "anyAttribute",
        peg$c171 = peg$literalExpectation("anyAttribute", false),
        peg$c172 = function(el) {return check_repeatedAttrs(el, getAttrs(el), "anyAttribute")},
        peg$c173 = "processContents",
        peg$c174 = peg$literalExpectation("processContents", false),
        peg$c175 = "any",
        peg$c176 = peg$literalExpectation("any", false),
        peg$c177 = function(el) {return check_occursAttrs(el,"any")},
        peg$c178 = "simpleType",
        peg$c179 = peg$literalExpectation("simpleType", false),
        peg$c180 = function(prefix, el_name, attrs) {type_depth++},
        peg$c181 = function(prefix, el_name, attrs, content, close_el) {return check_elTags(el_name, prefix, {merged: false, ...close_el})},
        peg$c182 = function(prefix, el_name, attrs, content, close_el) {
          if (!--type_depth) current_type = null

          let st = restrict_simpleType(attrs.name, content)
          if ("name" in attrs) simpleTypes[attrs.name] = JSON.parse(JSON.stringify(st))
          
          return {element: el_name, attrs, built_in_base: st.built_in_base, content: st.content}
        },
        peg$c183 = function(el) {return check_localTypeAttrs(el, "simpleType")},
        peg$c184 = function(attr, q1, val, q2) {return newLocalType(val,"simpleType")},
        peg$c185 = function(c) {any_type = "BSC"; return cleanContent(c)},
        peg$c186 = "annotation",
        peg$c187 = peg$literalExpectation("annotation", false),
        peg$c188 = function(prefix, el_name, attr, content, close_el) {return {merged: false, ...close_el, content}},
        peg$c189 = function(prefix, el_name, attr, close) {return check_elTags(el_name, prefix, close)},
        peg$c190 = function(prefix, el_name, attr, close) {return null},
        peg$c191 = "<",
        peg$c192 = peg$literalExpectation("<", false),
        peg$c193 = "appinfo",
        peg$c194 = peg$literalExpectation("appinfo", false),
        peg$c195 = "/>",
        peg$c196 = peg$literalExpectation("/>", false),
        peg$c197 = function(el_name, attr) {return ""},
        peg$c198 = function(el_name, attr, content) {schema_depth--; return content===null ? "" : content},
        peg$c199 = function(el_name, attr, close) {return {element: el_name, attrs: getAttrs(attr), content: close}},
        peg$c200 = function(prefix, el_name, attr, content, close_el) {schema_depth--; return {merged: false, ...close_el, content}},
        peg$c201 = function(prefix, el_name, attr, close) {return {element: el_name, attrs: getAttrs(attr), content: (close.content === [] || close.content === null) ? "" : close.content}},
        peg$c202 = peg$anyExpectation(),
        peg$c203 = function() {return text().trim()},
        peg$c204 = "</appinfo",
        peg$c205 = peg$literalExpectation("</appinfo", false),
        peg$c206 = function(prefix, name) {return {name, prefix}},
        peg$c207 = "documentation",
        peg$c208 = peg$literalExpectation("documentation", false),
        peg$c209 = function(el_name, attrs) {return ""},
        peg$c210 = function(el_name, attrs, content) {schema_depth--; return content===null ? "" : content},
        peg$c211 = function(el_name, attrs, close) {return {element: el_name, attrs, content: close}},
        peg$c212 = function(prefix, el_name, attrs, content, close_el) {schema_depth--; return {merged: false, ...close_el, content}},
        peg$c213 = function(prefix, el_name, attrs, close) {return {element: el_name, attrs, content: (close.content===[] || close.content===null) ? "" : close.content}},
        peg$c214 = "</documentation",
        peg$c215 = peg$literalExpectation("</documentation", false),
        peg$c216 = "union",
        peg$c217 = peg$literalExpectation("union", false),
        peg$c218 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close) && validateUnion(attrs, close.content)},
        peg$c219 = "memberTypes",
        peg$c220 = peg$literalExpectation("memberTypes", false),
        peg$c221 = "list",
        peg$c222 = peg$literalExpectation("list", false),
        peg$c223 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close) && check_derivingType(el_name, "itemType", attrs, close.content)},
        peg$c224 = function(prefix, el_name, attrs, close) {
          let simpleType = "itemType" in attrs ? simpleTypes[attrs.itemType] : close.content[0]
          simpleType.element = el_name
          return simpleType
        },
        peg$c225 = "itemType",
        peg$c226 = peg$literalExpectation("itemType", false),
        peg$c227 = "restriction",
        peg$c228 = peg$literalExpectation("restriction", false),
        peg$c229 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close) && check_derivingType(el_name, "base", attrs, close.content)},
        peg$c230 = function(prefix, el_name, attrs, close) {
          let base = close.content[0].element == "simpleType" ? close.content[0].built_in_base : attrs.base
          return {element: el_name, attrs, content: check_restrictionST_facets(el_name, base, close.content)}
        },
        peg$c231 = "base",
        peg$c232 = peg$literalExpectation("base", false),
        peg$c233 = function(h1, h2, t) {return cleanContent([h1, h2, ...t])},
        peg$c234 = function(prefix, el_name, attrs, close) {return check_requiredBase(el_name, "simpleContent", prefix, attrs, close)},
        peg$c235 = function(prefix, el_name, attrs, close) {return check_requiredBase(el_name, "complexContent", prefix, attrs, close)},
        peg$c236 = "extension",
        peg$c237 = peg$literalExpectation("extension", false),
        peg$c238 = function(prefix, el_name, a) {return check_constrFacetAttrs(el_name, a)},
        peg$c239 = function(el) {return el},
        peg$c240 = "value",
        peg$c241 = peg$literalExpectation("value", false),
        peg$c242 = "complexType",
        peg$c243 = peg$literalExpectation("complexType", false),
        peg$c244 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close) && check_complexTypeMutex(attrs, close.content) && check_repeatedNames(el_name, "attribute", close.content)},
        peg$c245 = function(prefix, el_name, attrs, close) {if (!--type_depth) current_type = null; return {element: el_name, attrs, content: close.content}},
        peg$c246 = function(el) {return check_localTypeAttrs(el, "complexType")},
        peg$c247 = "mixed",
        peg$c248 = peg$literalExpectation("mixed", false),
        peg$c249 = function(attr, q1, val, q2) {return newLocalType(val,"complexType")},
        peg$c250 = function(c) {return cleanContent(c.flat(2))},
        peg$c251 = "simpleContent",
        peg$c252 = peg$literalExpectation("simpleContent", false),
        peg$c253 = function(prefix, el_name, attr, content, close_el) {return check_elTags(el_name, prefix, {merged: false, ...close_el})},
        peg$c254 = function(prefix, el_name, attr, content, close_el) {return {element: el_name, attrs: getAttrs(attr), content}},
        peg$c255 = "complexContent",
        peg$c256 = peg$literalExpectation("complexContent", false),
        peg$c257 = function(prefix) {any_type = "C"},
        peg$c258 = function(prefix, el_name, attrs, content, close_el) {return {element: el_name, attrs, content}},
        peg$c259 = "all",
        peg$c260 = peg$literalExpectation("all", false),
        peg$c261 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close) && check_repeatedNames(el_name, "element", close.content)},
        peg$c262 = function(el) {return check_occursAttrs(el,"all")},
        peg$c263 = "1",
        peg$c264 = peg$literalExpectation("1", false),
        peg$c265 = function(attr, q1, val, q2) {return checkQM(q1,q2,attr,parseInt(val))},
        peg$c266 = /^[01]/,
        peg$c267 = peg$classExpectation(["0", "1"], false, false),
        peg$c268 = "choice",
        peg$c269 = peg$literalExpectation("choice", false),
        peg$c270 = "sequence",
        peg$c271 = peg$literalExpectation("sequence", false),
        peg$c272 = function(prefix, el_name, a) {return check_occursAttrs(a, el_name)},
        peg$c273 = "group",
        peg$c274 = peg$literalExpectation("group", false),
        peg$c275 = function(prefix, el_name, attrs, close) {return check_elTags(el_name, prefix, close) && check_groupContent(close.content)},
        peg$c276 = function(prefix, el_name, attrs, close) {curr.group = false; return {element: el_name, attrs, content: close.content}},
        peg$c277 = function(el) {let attrs = check_groupAttrs(el); curr.group = true; return attrs},
        peg$c278 = function(attr, q1, val, q2) {return validateName(val,"group")},
        peg$c279 = function(attr, q1, val, q2) {queue.push({attr: "ref", args: [val, "group"]}); return checkQM(q1,q2,attr,val)},
        peg$c280 = "notation",
        peg$c281 = peg$literalExpectation("notation", false),
        peg$c282 = function(el) {return check_notationAttrs(el)},
        peg$c283 = function(attr, q1, val, q2) {return validateName(val,"notation")},
        peg$c284 = "public",
        peg$c285 = peg$literalExpectation("public", false),
        peg$c286 = "system",
        peg$c287 = peg$literalExpectation("system", false),
        peg$c288 = "<!--",
        peg$c289 = peg$literalExpectation("<!--", false),
        peg$c290 = "-->",
        peg$c291 = peg$literalExpectation("-->", false),
        peg$c292 = function() {schema_depth++},
        peg$c293 = function() {schema_depth--},
        peg$c294 = function(prefix) {return prefix},
        peg$c295 = "</",
        peg$c296 = peg$literalExpectation("</", false),
        peg$c297 = function() {return {merged: true, content: []}},
        peg$c298 = function(content, close_el) {return {merged: false, ...close_el, content: cleanContent(content)}},
        peg$c299 = function(c) {return c.flat()},
        peg$c300 = "\"",
        peg$c301 = peg$literalExpectation("\"", false),
        peg$c302 = "'",
        peg$c303 = peg$literalExpectation("'", false),
        peg$c304 = function(qm) {return qm},
        peg$c305 = "false",
        peg$c306 = peg$literalExpectation("false", false),
        peg$c307 = function() { return false },
        peg$c308 = "true",
        peg$c309 = peg$literalExpectation("true", false),
        peg$c310 = function() { return true },
        peg$c311 = "null",
        peg$c312 = peg$literalExpectation("null", false),
        peg$c313 = function() { return null },
        peg$c314 = "0",
        peg$c315 = peg$literalExpectation("0", false),
        peg$c316 = /^[0-9]/,
        peg$c317 = peg$classExpectation([["0", "9"]], false, false),
        peg$c318 = function(i) {return i},
        peg$c319 = function(integer) {return parseInt(Array.isArray(integer) ? integer.flat().join("") : integer)},
        peg$c320 = /^[a-zA-Z]/,
        peg$c321 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c322 = /^[^"]/,
        peg$c323 = peg$classExpectation(["\""], true, false),
        peg$c324 = /^[^']/,
        peg$c325 = peg$classExpectation(["'"], true, false),
        peg$c326 = function() {return text().slice(1,-1)},
        peg$c327 = /^[a-zA-Z_]/,
        peg$c328 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
        peg$c329 = /^[^\0-\x7F]/,
        peg$c330 = peg$classExpectation([["\0", "\x7F"]], true, false),
        peg$c331 = /^[a-zA-Z0-9.\-_]/,
        peg$c332 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "-", "_"], false, false),
        peg$c333 = function(p) {return existsPrefix(p)},
        peg$c334 = function(id) {return validateID(id)},
        peg$c335 = function(id) {ids.push(id); return id},
        peg$c336 = /^[iI]/,
        peg$c337 = peg$classExpectation(["i", "I"], false, false),
        peg$c338 = "-",
        peg$c339 = peg$literalExpectation("-", false),
        peg$c340 = /^[xX]/,
        peg$c341 = peg$classExpectation(["x", "X"], false, false),
        peg$c342 = "un",
        peg$c343 = peg$literalExpectation("un", false),
        peg$c344 = "qualified",
        peg$c345 = peg$literalExpectation("qualified", false),
        peg$c346 = "optional",
        peg$c347 = peg$literalExpectation("optional", false),
        peg$c348 = "prohibited",
        peg$c349 = peg$literalExpectation("prohibited", false),
        peg$c350 = "required",
        peg$c351 = peg$literalExpectation("required", false),
        peg$c352 = "lax",
        peg$c353 = peg$literalExpectation("lax", false),
        peg$c354 = "skip",
        peg$c355 = peg$literalExpectation("skip", false),
        peg$c356 = "strict",
        peg$c357 = peg$literalExpectation("strict", false),
        peg$c358 = "length",
        peg$c359 = peg$literalExpectation("length", false),
        peg$c360 = "max",
        peg$c361 = peg$literalExpectation("max", false),
        peg$c362 = "min",
        peg$c363 = peg$literalExpectation("min", false),
        peg$c364 = "Length",
        peg$c365 = peg$literalExpectation("Length", false),
        peg$c366 = "Ex",
        peg$c367 = peg$literalExpectation("Ex", false),
        peg$c368 = "In",
        peg$c369 = peg$literalExpectation("In", false),
        peg$c370 = "clusive",
        peg$c371 = peg$literalExpectation("clusive", false),
        peg$c372 = "total",
        peg$c373 = peg$literalExpectation("total", false),
        peg$c374 = "fraction",
        peg$c375 = peg$literalExpectation("fraction", false),
        peg$c376 = "Digits",
        peg$c377 = peg$literalExpectation("Digits", false),
        peg$c378 = "whiteSpace",
        peg$c379 = peg$literalExpectation("whiteSpace", false),
        peg$c380 = "pattern",
        peg$c381 = peg$literalExpectation("pattern", false),
        peg$c382 = "enumeration",
        peg$c383 = peg$literalExpectation("enumeration", false),
        peg$c384 = function(p, name) {return existsPrefix(p)},
        peg$c385 = function(p, name) {queue.push({attr: "type", args: [name, p, any_type, current_type, Object.values(curr).some(x=>x)]})},
        peg$c386 = function(name) {queue.push({attr: "type", args: [name, null, any_type, current_type, Object.values(curr).some(x=>x)]})},
        peg$c387 = "#all",
        peg$c388 = peg$literalExpectation("#all", false),
        peg$c389 = function(l) {return validate_listOfValues(l, 'O valor do atributo "finalDefault" deve corresponder a (#all | Lista de (extension | restriction | list | union))!')},
        peg$c390 = function(fst, n) {return n},
        peg$c391 = function(fst, others) {if (fst !== null) others.unshift(fst); return others},
        peg$c392 = "substitution",
        peg$c393 = peg$literalExpectation("substitution", false),
        peg$c394 = function(l) {return validate_listOfValues(l, 'O valor do atributo "block" deve corresponder a (#all | Lista de (extension | restriction | substitution))!')},
        peg$c395 = function(l) {return validate_listOfValues(l, 'O valor do atributo "final" do elemento <simpleType> deve corresponder a (#all | Lista de (list | union | restriction))!')},
        peg$c396 = "##any",
        peg$c397 = peg$literalExpectation("##any", false),
        peg$c398 = "##other",
        peg$c399 = peg$literalExpectation("##other", false),
        peg$c400 = function(l) {return check_namespace(l)},
        peg$c401 = "##local",
        peg$c402 = peg$literalExpectation("##local", false),
        peg$c403 = "##targetNamespace",
        peg$c404 = peg$literalExpectation("##targetNamespace", false),
        peg$c405 = "##",
        peg$c406 = peg$literalExpectation("##", false),
        peg$c407 = /^[^ "\t\n\r]/,
        peg$c408 = peg$classExpectation([" ", "\"", "\t", "\n", "\r"], true, false),
        peg$c409 = /^[^ '\t\n\r]/,
        peg$c410 = peg$classExpectation([" ", "'", "\t", "\n", "\r"], true, false),
        peg$c411 = "|",
        peg$c412 = peg$literalExpectation("|", false),
        peg$c413 = ".//",
        peg$c414 = peg$literalExpectation(".//", false),
        peg$c415 = "/",
        peg$c416 = peg$literalExpectation("/", false),
        peg$c417 = "@",
        peg$c418 = peg$literalExpectation("@", false),
        peg$c419 = ".",
        peg$c420 = peg$literalExpectation(".", false),
        peg$c421 = "*",
        peg$c422 = peg$literalExpectation("*", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseDSL_text() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomment();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseXML_declaration();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomment();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseschema();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c0(s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c2.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c2.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parsews2() {
      var s0, s1;

      s0 = [];
      if (peg$c2.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c2.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseXML_declaration() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseXML_version();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseXML_encoding();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseXML_standalone();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c6) {
                  s6 = peg$c6;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseXML_version() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c8) {
          s2 = peg$c8;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQM();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c12) {
                    s7 = peg$c12;
                    peg$currPos += 3;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseQM();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s9 = peg$c14(s6, s8);
                      if (s9) {
                        s9 = void 0;
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseXML_encoding() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c15) {
          s2 = peg$c15;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQM();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseXML_encoding_value();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseQM();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s9 = peg$c14(s6, s8);
                      if (s9) {
                        s9 = void 0;
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseXML_encoding_value() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 56) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c21) {
            s2 = peg$c21;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 14) === peg$c23) {
          s1 = peg$c23;
          peg$currPos += 14;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 50) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 52) {
              s2 = peg$c27;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 9) === peg$c29) {
            s1 = peg$c29;
            peg$currPos += 9;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c31.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c33) {
              s0 = peg$c33;
              peg$currPos += 11;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c35) {
                s0 = peg$c35;
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c36); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c37) {
                  s0 = peg$c37;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseXML_standalone() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c39) {
          s2 = peg$c39;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQM();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseXML_standalone_value();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseQM();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s9 = peg$c14(s6, s8);
                      if (s9) {
                        s9 = void 0;
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseXML_standalone_value() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c41) {
        s0 = peg$c41;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c43) {
          s0 = peg$c43;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
      }

      return s0;
    }

    function peg$parseschema() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseopen_XSD_el();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c45(s2);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c46) {
          s2 = peg$c46;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseschema_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s5 = peg$c48;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c49); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseschema_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_schema();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s9 = peg$c50(s2, s3, s7);
                      if (s9) {
                        s9 = void 0;
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c51(s2, s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_schema() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseclose_XSD_prefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c46) {
          s2 = peg$c46;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c48;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c52(s1);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseformDefault();
      if (s2 === peg$FAILED) {
        s2 = peg$parseblockDefault();
        if (s2 === peg$FAILED) {
          s2 = peg$parsefinalDefault();
          if (s2 === peg$FAILED) {
            s2 = peg$parsexmlns();
            if (s2 === peg$FAILED) {
              s2 = peg$parseelem_id();
              if (s2 === peg$FAILED) {
                s2 = peg$parseelem_lang();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseschema_version();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsetargetNamespace();
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseformDefault();
          if (s2 === peg$FAILED) {
            s2 = peg$parseblockDefault();
            if (s2 === peg$FAILED) {
              s2 = peg$parsefinalDefault();
              if (s2 === peg$FAILED) {
                s2 = peg$parsexmlns();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseelem_id();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseelem_lang();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseschema_version();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsetargetNamespace();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c53(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c54(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseformDefault() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c55) {
          s4 = peg$c55;
          peg$currPos += 9;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c57) {
            s4 = peg$c57;
            peg$currPos += 7;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
        }
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c59) {
            s5 = peg$c59;
            peg$currPos += 11;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseform_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseblockDefault() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c62) {
          s2 = peg$c62;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseblock_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefinalDefault() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c64) {
          s2 = peg$c64;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsefinalDefault_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsexmlns() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c66) {
          s2 = peg$c66;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c68;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseNCName();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c70(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c10;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestring();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c71(s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_version() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c8) {
          s2 = peg$c8;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c72(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetargetNamespace() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 15) === peg$c73) {
          s2 = peg$c73;
          peg$currPos += 15;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c75(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschema_content() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsecomment();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseredefine();
        if (s4 === peg$FAILED) {
          s4 = peg$parseinclude();
          if (s4 === peg$FAILED) {
            s4 = peg$parseimport();
            if (s4 === peg$FAILED) {
              s4 = peg$parseannotation();
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseredefine();
          if (s4 === peg$FAILED) {
            s4 = peg$parseinclude();
            if (s4 === peg$FAILED) {
              s4 = peg$parseimport();
              if (s4 === peg$FAILED) {
                s4 = peg$parseannotation();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsesimpleType();
          if (s6 === peg$FAILED) {
            s6 = peg$parsecomplexType();
            if (s6 === peg$FAILED) {
              s6 = peg$parsegroup();
              if (s6 === peg$FAILED) {
                s6 = peg$parseattributeGroup();
              }
            }
          }
          if (s6 === peg$FAILED) {
            s6 = peg$parseelement();
            if (s6 === peg$FAILED) {
              s6 = peg$parseattribute();
              if (s6 === peg$FAILED) {
                s6 = peg$parsenotation();
              }
            }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseannotation();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseannotation();
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsesimpleType();
            if (s6 === peg$FAILED) {
              s6 = peg$parsecomplexType();
              if (s6 === peg$FAILED) {
                s6 = peg$parsegroup();
                if (s6 === peg$FAILED) {
                  s6 = peg$parseattributeGroup();
                }
              }
            }
            if (s6 === peg$FAILED) {
              s6 = peg$parseelement();
              if (s6 === peg$FAILED) {
                s6 = peg$parseattribute();
                if (s6 === peg$FAILED) {
                  s6 = peg$parsenotation();
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseannotation();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseannotation();
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c76(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinclude() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c77) {
          s2 = peg$c77;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseschemaLocID_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$parseann_content();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseschemaLocID_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseschemaLocation();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseelem_id();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseelem_id();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseschemaLocation();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c81(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseschemaLocation() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 14) === peg$c82) {
          s2 = peg$c82;
          peg$currPos += 14;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c75(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseimport() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c84) {
          s2 = peg$c84;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseimport_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$parseann_content();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseimport_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseimport_namespace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseschemaLocation();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseimport_namespace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_id();
          if (s2 === peg$FAILED) {
            s2 = peg$parseschemaLocation();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c86(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseimport_namespace() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c87) {
          s2 = peg$c87;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c75(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseredefine() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c89) {
          s4 = peg$c89;
          peg$currPos += 8;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c91(s1);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseschemaLocID_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseredefine_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c93(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseredefine_content() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesimpleType();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomplexType();
          if (s2 === peg$FAILED) {
            s2 = peg$parsegroup();
            if (s2 === peg$FAILED) {
              s2 = peg$parseattributeGroup();
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseannotation();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesimpleType();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecomplexType();
            if (s2 === peg$FAILED) {
              s2 = peg$parsegroup();
              if (s2 === peg$FAILED) {
                s2 = peg$parseattributeGroup();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseelement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c57) {
          s4 = peg$c57;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c95(s1);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelement_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseelement_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c96(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelement_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_abstract();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_block();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_default();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_substitutionGroup();
            if (s2 === peg$FAILED) {
              s2 = peg$parseelem_final();
              if (s2 === peg$FAILED) {
                s2 = peg$parseelem_fixed();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseelem_form();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseelem_id();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseelem_minOccurs();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseelem_maxOccurs();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseelem_name();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseelem_nillable();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseelem_ref();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseelem_type();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_abstract();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_block();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_default();
            if (s2 === peg$FAILED) {
              s2 = peg$parseelem_substitutionGroup();
              if (s2 === peg$FAILED) {
                s2 = peg$parseelem_final();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseelem_fixed();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseelem_form();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseelem_id();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseelem_minOccurs();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseelem_maxOccurs();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseelem_name();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseelem_nillable();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseelem_ref();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseelem_type();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c97(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseelem_abstract() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c98) {
          s2 = peg$c98;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c99); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseboolean();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_block() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c100) {
          s2 = peg$c100;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseblock_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_default() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c102) {
          s2 = peg$c102;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c104(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_final() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c105) {
          s2 = peg$c105;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseelem_final_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_fixed() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c107) {
          s2 = peg$c107;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c108); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c104(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_form() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c109) {
          s2 = peg$c109;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseform_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_id() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c111) {
          s2 = peg$c111;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseID();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_maxOccurs() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c113) {
          s2 = peg$c113;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c114); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseint();
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c115) {
                    s6 = peg$c115;
                    peg$currPos += 9;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_minOccurs() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c117) {
          s2 = peg$c117;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseint();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c121(s2, s5, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2, s5, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_nillable() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c122) {
          s2 = peg$c122;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseboolean();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_lang() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c124) {
          s2 = peg$c124;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parselanguage();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_ref() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c128(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_source() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c129) {
          s2 = peg$c129;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c130); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c104(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_substitutionGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 17) === peg$c131) {
          s2 = peg$c131;
          peg$currPos += 17;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c132); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_type() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c133) {
          s2 = peg$c133;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetype_value();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelement_content() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleType();
        if (s3 === peg$FAILED) {
          s3 = peg$parsecomplexType();
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsekeyOrUnique();
          if (s5 === peg$FAILED) {
            s5 = peg$parsekeyref();
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsekeyOrUnique();
            if (s5 === peg$FAILED) {
              s5 = peg$parsekeyref();
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefield() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c136) {
          s2 = peg$c136;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c137); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefield_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$parseann_content();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefield_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefield_xpath();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseelem_id();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseelem_id();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefield_xpath();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c138(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefield_xpath() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c139) {
          s2 = peg$c139;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsefieldXPath();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselector() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c141) {
          s2 = peg$c141;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c142); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselector_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$parseann_content();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselector_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseselector_xpath();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseelem_id();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseelem_id();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselector_xpath();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c143(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseselector_xpath() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c139) {
          s2 = peg$c139;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseselectorXPath();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekeyOrUnique() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c144) {
          s3 = peg$c144;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c145); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c146) {
            s3 = peg$c146;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c147); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsekeyOrUnique_attrs();
          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$c148(s1, s2, s4);
            if (s5) {
              s5 = void 0;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c149(s1, s2, s4);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsexpath_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekeyOrUnique_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseelem_constraint_name();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseelem_id();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseelem_id();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_constraint_name();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseelem_constraint_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsexpath_content() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseselector();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsefield();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsefield();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekeyref() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c151) {
          s2 = peg$c151;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsekeyref_attrs();
          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$c153(s1, s2, s4);
            if (s5) {
              s5 = void 0;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c149(s1, s2, s4);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsexpath_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekeyref_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_constraint_name();
        if (s2 === peg$FAILED) {
          s2 = peg$parsekeyref_refer();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_constraint_name();
          if (s2 === peg$FAILED) {
            s2 = peg$parsekeyref_refer();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c154(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsekeyref_refer() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c155) {
          s2 = peg$c155;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c55) {
          s4 = peg$c55;
          peg$currPos += 9;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c157(s1);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattribute_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseattribute_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c158(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattribute_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_default();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_fixed();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_form();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_id();
            if (s2 === peg$FAILED) {
              s2 = peg$parseattr_name();
              if (s2 === peg$FAILED) {
                s2 = peg$parseattr_ref();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseelem_type();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseattr_use();
                  }
                }
              }
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_default();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_fixed();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_form();
            if (s2 === peg$FAILED) {
              s2 = peg$parseelem_id();
              if (s2 === peg$FAILED) {
                s2 = peg$parseattr_name();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseattr_ref();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseelem_type();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseattr_use();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c159(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattr_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c160(s2, s5, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2, s5, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_ref() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c161(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_use() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c162) {
          s2 = peg$c162;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c163); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseuse_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattribute_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleType();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattributeGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 14) === peg$c164) {
          s2 = peg$c164;
          peg$currPos += 14;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeGroup_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseattributeGroup_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c166(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeGroup_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parseattrGroup_name();
        if (s2 === peg$FAILED) {
          s2 = peg$parseattrGroup_ref();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseattrGroup_name();
          if (s2 === peg$FAILED) {
            s2 = peg$parseattrGroup_ref();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c167(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseattrGroup_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c168(s2, s5, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2, s5, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattrGroup_ref() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c169(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeGroup_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseattributes();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseanyAttribute() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c170) {
          s2 = peg$c170;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseanyAttribute_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$parseann_content();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseanyAttribute_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parseany_namespace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseprocessContents();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseany_namespace();
          if (s2 === peg$FAILED) {
            s2 = peg$parseprocessContents();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c172(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseany_namespace() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c87) {
          s2 = peg$c87;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenamespace_values();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c75(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprocessContents() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 15) === peg$c173) {
          s2 = peg$c173;
          peg$currPos += 15;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c174); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseprocessContents_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseany() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c175) {
          s2 = peg$c175;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c176); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseany_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$parseann_content();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseany_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_maxOccurs();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_minOccurs();
          if (s2 === peg$FAILED) {
            s2 = peg$parseany_namespace();
            if (s2 === peg$FAILED) {
              s2 = peg$parseprocessContents();
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_maxOccurs();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_minOccurs();
            if (s2 === peg$FAILED) {
              s2 = peg$parseany_namespace();
              if (s2 === peg$FAILED) {
                s2 = peg$parseprocessContents();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c177(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesimpleType() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 10) === peg$c178) {
          s4 = peg$c178;
          peg$currPos += 10;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c179); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c157(s1);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesimpleType_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseopenEl();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c180(s1, s2, s3);
              }
              s5 = s6;
              if (s5 !== peg$FAILED) {
                s6 = peg$parsews();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsesimpleType_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = peg$currPos;
                      s9 = peg$c181(s1, s2, s3, s7, s8);
                      if (s9) {
                        s9 = void 0;
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c182(s1, s2, s3, s7, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesimpleType_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsesimpleType_final();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesimpleType_name();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsesimpleType_final();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_id();
          if (s2 === peg$FAILED) {
            s2 = peg$parsesimpleType_name();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c183(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesimpleType_final() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c105) {
          s2 = peg$c105;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesimpleType_final_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesimpleType_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c184(s2, s5, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2, s5, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesimpleType_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parserestrictionST();
        if (s3 === peg$FAILED) {
          s3 = peg$parselist();
          if (s3 === peg$FAILED) {
            s3 = peg$parseunion();
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c185(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseannotation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c186) {
          s2 = peg$c186;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c187); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_id();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseannotation_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c188(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c189(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c190(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseannotation_content() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseappinfo();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedocumentation();
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseappinfo();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedocumentation();
        }
      }

      return s0;
    }

    function peg$parseappinfo() {
      var s0;

      s0 = peg$parseappinfo_simple();
      if (s0 === peg$FAILED) {
        s0 = peg$parseappinfo_prefix();
      }

      return s0;
    }

    function peg$parseappinfo_simple() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c191;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c193) {
          s2 = peg$c193;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_source();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c195) {
                s6 = peg$c195;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c196); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c197(s2, s3);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseappinfo_content_simple();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_appinfo_simple();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c198(s2, s3, s7);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c199(s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseappinfo_prefix() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c193) {
          s2 = peg$c193;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_source();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseappinfo_content_prefix();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_appinfo_prefix();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c200(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c189(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c201(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseappinfo_content_simple() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseclose_appinfo_simple();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseappinfo_content_simple();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseappinfo_content_simple();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c203();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseappinfo_content_prefix() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseclose_appinfo_prefix();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseappinfo_content_prefix();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseappinfo_content_prefix();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c203();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_appinfo_simple() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c204) {
        s1 = peg$c204;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c205); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c48;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_appinfo_prefix() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseclose_XSD_prefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c193) {
          s2 = peg$c193;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c48;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c206(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedocumentation() {
      var s0;

      s0 = peg$parsedoc_simple();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedoc_prefix();
      }

      return s0;
    }

    function peg$parsedocumentation_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseelem_source();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseelem_lang();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseelem_lang();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_source();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedoc_simple() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c191;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c207) {
          s2 = peg$c207;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedocumentation_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c195) {
                s6 = peg$c195;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c196); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsews();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s5;
                  s6 = peg$c209(s2, s3);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsedoc_content_simple();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_doc_simple();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c210(s2, s3, s7);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c211(s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedoc_prefix() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c207) {
          s2 = peg$c207;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedocumentation_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsedoc_content_prefix();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_doc_prefix();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c212(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c213(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedoc_content_prefix() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseclose_doc_prefix();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedoc_content_prefix();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedoc_content_prefix();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c203();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedoc_content_simple() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseclose_doc_simple();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedoc_content_simple();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedoc_content_simple();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c203();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_doc_simple() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c214) {
        s1 = peg$c214;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c215); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c48;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_doc_prefix() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseclose_XSD_prefix();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c207) {
          s2 = peg$c207;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c208); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c48;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c206(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunion() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c216) {
          s2 = peg$c216;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c217); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseunion_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseunion_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c218(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunion_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseelem_id();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseunion_memberTypes();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseunion_memberTypes();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_id();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseunion_memberTypes() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c219) {
          s2 = peg$c219;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c220); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parselist_types();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunion_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsesimpleType();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesimpleType();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselist() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c221) {
          s2 = peg$c221;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c222); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselist_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselist_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c223(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c224(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselist_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseelem_id();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselist_itemType();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parselist_itemType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_id();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselist_itemType() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c225) {
          s2 = peg$c225;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c226); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetype_value();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselist_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleType();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserestrictionST() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c227) {
          s2 = peg$c227;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebase_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserestrictionST_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c229(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c230(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebase_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsebase();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseelem_id();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseelem_id();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebase();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebase() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c231) {
          s2 = peg$c231;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c232); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetype_value();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserestrictionST_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseannotation();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesimpleType();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseconstrFacet();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseconstrFacet();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c233(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserestrictionSC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c227) {
          s2 = peg$c227;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebase_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserestrictionSC_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c234(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserestrictionSC_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parserestrictionST_content();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseattributes();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserestrictionCC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c227) {
          s2 = peg$c227;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebase_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCC_son_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c235(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCC_son_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseall();
        if (s3 === peg$FAILED) {
          s3 = peg$parsechoiceOrSequence();
          if (s3 === peg$FAILED) {
            s3 = peg$parsegroup();
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseattributes();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseextensionSC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c236) {
          s2 = peg$c236;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c237); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebase_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseextensionSC_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c234(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseextensionSC_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseattributes();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseextensionCC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c236) {
          s2 = peg$c236;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c237); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsebase_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCC_son_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c235(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconstrFacet() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseconstrFacet_values();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseconstrFacet_attrs();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c238(s1, s2, s4);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsemerged_close();
            if (s4 === peg$FAILED) {
              s4 = peg$parseann_content();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s5 = peg$c79(s1, s2, s3, s4);
              if (s5) {
                s5 = void 0;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c80(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconstrFacet_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parseconstrFacet_fixed();
        if (s2 === peg$FAILED) {
          s2 = peg$parseconstrFacet_value();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseconstrFacet_fixed();
          if (s2 === peg$FAILED) {
            s2 = peg$parseconstrFacet_value();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c239(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseconstrFacet_fixed() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c107) {
          s2 = peg$c107;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c108); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseboolean();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconstrFacet_value() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c240) {
          s2 = peg$c240;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c241); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c75(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomplexType() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c242) {
          s2 = peg$c242;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c243); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomplexType_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$currPos;
                s7 = peg$parseopenEl();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c180(s1, s2, s3);
                }
                s6 = s7;
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecomplexType_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c244(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c245(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomplexType_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_abstract();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecomplexType_block();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_final();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_id();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecomplex_mixed();
              if (s2 === peg$FAILED) {
                s2 = peg$parsecomplexType_name();
              }
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_abstract();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomplexType_block();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_final();
            if (s2 === peg$FAILED) {
              s2 = peg$parseelem_id();
              if (s2 === peg$FAILED) {
                s2 = peg$parsecomplex_mixed();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsecomplexType_name();
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c246(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomplexType_block() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c100) {
          s2 = peg$c100;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseelem_final_values();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomplex_mixed() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c247) {
          s2 = peg$c247;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c248); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseboolean();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c61(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomplexType_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c249(s2, s5, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2, s5, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomplexType_content() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleContent();
        if (s3 === peg$FAILED) {
          s3 = peg$parsecomplexContent();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseall();
            if (s4 === peg$FAILED) {
              s4 = peg$parsechoiceOrSequence();
              if (s4 === peg$FAILED) {
                s4 = peg$parsegroup();
              }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseattributes();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c250(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesimpleContent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c251) {
          s2 = peg$c251;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c252); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseelem_id();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseopenEl();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesimpleContent_content();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseclose_XSD_el();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c253(s1, s2, s3, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c254(s1, s2, s3, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesimpleContent_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parserestrictionSC();
        if (s3 === peg$FAILED) {
          s3 = peg$parseextensionSC();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomplexContent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 14) === peg$c255) {
          s4 = peg$c255;
          peg$currPos += 14;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c256); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c257(s1);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomplexContent_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseopenEl();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecomplexContent_content();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseclose_XSD_el();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c181(s1, s2, s3, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c258(s1, s2, s3, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomplexContent_attrs() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsecomplex_mixed();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseelem_id();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseelem_id();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomplex_mixed();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomplexContent_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parserestrictionCC();
        if (s3 === peg$FAILED) {
          s3 = peg$parseextensionCC();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c185(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseall() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c259) {
          s2 = peg$c259;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseall_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseall_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c261(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseall_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parseall_maxOccurs();
        if (s2 === peg$FAILED) {
          s2 = peg$parseall_minOccurs();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseall_maxOccurs();
          if (s2 === peg$FAILED) {
            s2 = peg$parseall_minOccurs();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c262(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseall_maxOccurs() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c113) {
          s2 = peg$c113;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c114); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 49) {
                  s6 = peg$c263;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c264); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c265(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseall_minOccurs() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c117) {
          s2 = peg$c117;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                if (peg$c266.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c267); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c265(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseall_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseelement();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseelement();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsechoiceOrSequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c268) {
          s3 = peg$c268;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c269); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c270) {
            s3 = peg$c270;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c271); }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsechoiceOrSeq_attrs();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c272(s1, s2, s4);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsechoiceOrSeq_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c261(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsechoiceOrSeq_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_maxOccurs();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_minOccurs();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_maxOccurs();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_minOccurs();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c239(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsechoiceOrSeq_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseelement();
        if (s4 === peg$FAILED) {
          s4 = peg$parsechoiceOrSequence();
          if (s4 === peg$FAILED) {
            s4 = peg$parsegroup();
            if (s4 === peg$FAILED) {
              s4 = peg$parseany();
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseelement();
          if (s4 === peg$FAILED) {
            s4 = peg$parsechoiceOrSequence();
            if (s4 === peg$FAILED) {
              s4 = peg$parsegroup();
              if (s4 === peg$FAILED) {
                s4 = peg$parseany();
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsegroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c273) {
          s2 = peg$c273;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c274); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsegroup_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parseopenEl();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsegroup_content();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseclose_XSD_el();
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c92(s1, s2, s3, s7, s8);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c275(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c276(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsegroup_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsegroup_name();
      if (s2 === peg$FAILED) {
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_maxOccurs();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_minOccurs();
            if (s2 === peg$FAILED) {
              s2 = peg$parsegroup_ref();
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsegroup_name();
        if (s2 === peg$FAILED) {
          s2 = peg$parseelem_id();
          if (s2 === peg$FAILED) {
            s2 = peg$parseelem_maxOccurs();
            if (s2 === peg$FAILED) {
              s2 = peg$parseelem_minOccurs();
              if (s2 === peg$FAILED) {
                s2 = peg$parsegroup_ref();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c277(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsegroup_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c278(s2, s5, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2, s5, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsegroup_ref() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseQName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c279(s2, s5, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsegroup_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseannotation();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseall();
        if (s3 === peg$FAILED) {
          s3 = peg$parsechoiceOrSequence();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenotation() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseopen_XSD_el();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c280) {
          s2 = peg$c280;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c281); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenotation_attrs();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemerged_close();
              if (s5 === peg$FAILED) {
                s5 = peg$parseann_content();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c79(s1, s2, s3, s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s2, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenotation_attrs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseelem_id();
      if (s2 === peg$FAILED) {
        s2 = peg$parsenotation_name();
        if (s2 === peg$FAILED) {
          s2 = peg$parsenotation_URI_attrs();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseelem_id();
        if (s2 === peg$FAILED) {
          s2 = peg$parsenotation_name();
          if (s2 === peg$FAILED) {
            s2 = peg$parsenotation_URI_attrs();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c282(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenotation_name() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c119) {
          s2 = peg$c119;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseQMo();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNCName();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseQMc();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s8 = peg$c283(s2, s5, s6, s7);
                    if (s8) {
                      s8 = void 0;
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2, s5, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenotation_URI_attrs() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews2();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c284) {
          s2 = peg$c284;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c285); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c286) {
            s2 = peg$c286;
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c287); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c10;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsews();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestring();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c75(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c288) {
        s1 = peg$c288;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c289); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomment_content();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseclose_comment();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomment_content() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseclose_comment();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsecomment_content();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsecomment_content();
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_comment() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c290) {
        s0 = peg$c290;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }

      return s0;
    }

    function peg$parseopenEl() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c48;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c292();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecloseEl() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c48;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c293();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopen_XSD_el() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c191;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNCName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c68;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c70(s3);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c294(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_XSD_prefix() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c295) {
        s1 = peg$c295;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNCName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c68;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c70(s3);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c294(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemerged_close() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c195) {
        s1 = peg$c195;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c196); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c297();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseclose_XSD_el() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseclose_XSD_prefix();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseXSD_el_name();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecloseEl();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c206(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseann_content() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopenEl();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseannotation();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseclose_XSD_el();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c298(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parseattribute();
      if (s3 === peg$FAILED) {
        s3 = peg$parseattributeGroup();
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseattribute();
        if (s3 === peg$FAILED) {
          s3 = peg$parseattributeGroup();
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseanyAttribute();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c299(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseQM() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c300;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s0 = peg$c302;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c303); }
        }
      }

      return s0;
    }

    function peg$parseQMo() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c300;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c302;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c303); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c304(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseQMc() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c300;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s2 = peg$c302;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c303); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c304(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseboolean() {
      var s0;

      s0 = peg$parsetrue();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefalse();
      }

      return s0;
    }

    function peg$parsefalse() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c305) {
        s1 = peg$c305;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c307();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetrue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c308) {
        s1 = peg$c308;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c309); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c310();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenull() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c311) {
        s1 = peg$c311;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c313();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 48) {
        s3 = peg$c314;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c315); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 48) {
          s3 = peg$c314;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c315); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (peg$c31.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c316.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c317); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c316.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c317); }
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c318(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s2 = peg$c314;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c315); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (input.charCodeAt(peg$currPos) === 48) {
            s4 = peg$c314;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c315); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 48) {
              s4 = peg$c314;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c315); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c318(s2);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c319(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseletter() {
      var s0;

      if (peg$c320.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c321); }
      }

      return s0;
    }

    function peg$parseletter1_8() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseletter();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseletter();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseletter();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseletter();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseletter();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseletter();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseletter();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseletter();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s2 = [s2, s3, s4, s5, s6, s7, s8, s9];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c300;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c322.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c323); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c322.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c323); }
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c300;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c301); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c302;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c303); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c324.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c325); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c324.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c325); }
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s4 = peg$c302;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c303); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c326();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNCName() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c327.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }
      if (s2 === peg$FAILED) {
        if (peg$c329.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c330); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c331.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c332); }
        }
        if (s4 === peg$FAILED) {
          if (peg$c329.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c330); }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c331.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c332); }
          }
          if (s4 === peg$FAILED) {
            if (peg$c329.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c330); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseQName() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseNCName();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s4 = peg$c68;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s5 = peg$c333(s3);
          if (s5) {
            s5 = void 0;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNCName();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseID() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseNCName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c334(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c335(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselanguage() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseletter();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseletter();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (peg$c336.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s4 = peg$c338;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c339); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseletter();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseletter();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (peg$c340.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c341); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c338;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c339); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseletter1_8();
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s4 = peg$c338;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c339); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseletter1_8();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseXSD_el_name() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c77) {
        s0 = peg$c77;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c84) {
          s0 = peg$c84;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c89) {
            s0 = peg$c89;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c90); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c280) {
              s0 = peg$c280;
              peg$currPos += 8;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c281); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c186) {
                s0 = peg$c186;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c187); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c193) {
                  s0 = peg$c193;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c194); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 13) === peg$c207) {
                    s0 = peg$c207;
                    peg$currPos += 13;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c208); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c57) {
                      s0 = peg$c57;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c58); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c136) {
                        s0 = peg$c136;
                        peg$currPos += 5;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c137); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c141) {
                          s0 = peg$c141;
                          peg$currPos += 8;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c142); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c144) {
                            s0 = peg$c144;
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c145); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c151) {
                              s0 = peg$c151;
                              peg$currPos += 6;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c152); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c146) {
                                s0 = peg$c146;
                                peg$currPos += 6;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c147); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 14) === peg$c164) {
                                  s0 = peg$c164;
                                  peg$currPos += 14;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c165); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 9) === peg$c55) {
                                    s0 = peg$c55;
                                    peg$currPos += 9;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c56); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 12) === peg$c170) {
                                      s0 = peg$c170;
                                      peg$currPos += 12;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c171); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 10) === peg$c178) {
                                        s0 = peg$c178;
                                        peg$currPos += 10;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c179); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 5) === peg$c216) {
                                          s0 = peg$c216;
                                          peg$currPos += 5;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c217); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c221) {
                                            s0 = peg$c221;
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c222); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 11) === peg$c227) {
                                              s0 = peg$c227;
                                              peg$currPos += 11;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c228); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 9) === peg$c236) {
                                                s0 = peg$c236;
                                                peg$currPos += 9;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c237); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseconstrFacet_values();
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 11) === peg$c242) {
                                                    s0 = peg$c242;
                                                    peg$currPos += 11;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c243); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 13) === peg$c251) {
                                                      s0 = peg$c251;
                                                      peg$currPos += 13;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c252); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 14) === peg$c255) {
                                                        s0 = peg$c255;
                                                        peg$currPos += 14;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c256); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 3) === peg$c259) {
                                                          s0 = peg$c259;
                                                          peg$currPos += 3;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c260); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 6) === peg$c268) {
                                                            s0 = peg$c268;
                                                            peg$currPos += 6;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c269); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 5) === peg$c273) {
                                                              s0 = peg$c273;
                                                              peg$currPos += 5;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c274); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 8) === peg$c270) {
                                                                s0 = peg$c270;
                                                                peg$currPos += 8;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c271); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 3) === peg$c175) {
                                                                  s0 = peg$c175;
                                                                  peg$currPos += 3;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c176); }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseform_values() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c342) {
        s2 = peg$c342;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c343); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c344) {
          s3 = peg$c344;
          peg$currPos += 9;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c345); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseuse_values() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c346) {
        s0 = peg$c346;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c347); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c348) {
          s0 = peg$c348;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c349); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c350) {
            s0 = peg$c350;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c351); }
          }
        }
      }

      return s0;
    }

    function peg$parseprocessContents_values() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c352) {
        s0 = peg$c352;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c353); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c354) {
          s0 = peg$c354;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c355); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c356) {
            s0 = peg$c356;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c357); }
          }
        }
      }

      return s0;
    }

    function peg$parseconstrFacet_values() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c358) {
        s1 = peg$c358;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c359); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c360) {
          s2 = peg$c360;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c361); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c362) {
            s2 = peg$c362;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c363); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c364) {
            s3 = peg$c364;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c365); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c360) {
            s2 = peg$c360;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c361); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c362) {
              s2 = peg$c362;
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c363); }
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c366) {
              s3 = peg$c366;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c367); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c368) {
                s3 = peg$c368;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c369); }
              }
            }
            if (s3 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c370) {
                s4 = peg$c370;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c371); }
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c372) {
              s2 = peg$c372;
              peg$currPos += 5;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c373); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c374) {
                s2 = peg$c374;
                peg$currPos += 8;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c375); }
              }
            }
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c376) {
                s3 = peg$c376;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c377); }
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c378) {
                s1 = peg$c378;
                peg$currPos += 10;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c379); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c380) {
                  s1 = peg$c380;
                  peg$currPos += 7;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c381); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 11) === peg$c382) {
                    s1 = peg$c382;
                    peg$currPos += 11;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c383); }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetype_value() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseNCName();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c68;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNCName();
          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$c384(s2, s4);
            if (s5) {
              s5 = void 0;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c385(s2, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseNCName();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c386(s2);
        }
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsefinalDefault_values() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c387) {
        s0 = peg$c387;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c388); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsefinalDefault_listOfValues();
      }

      return s0;
    }

    function peg$parsefinalDefault_list_val() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c236) {
        s0 = peg$c236;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c227) {
          s0 = peg$c227;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c221) {
            s0 = peg$c221;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c222); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c216) {
              s0 = peg$c216;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c217); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsefinalDefault_listOfValues() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parsefinalDefault_list_val();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsews2();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsefinalDefault_list_val();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsews2();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsefinalDefault_list_val();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c389(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelem_final_values() {
      var s0, s1, s2, s3;

      if (input.substr(peg$currPos, 4) === peg$c387) {
        s0 = peg$c387;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c388); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c236) {
          s1 = peg$c236;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c237); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsews();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c227) {
              s3 = peg$c227;
              peg$currPos += 11;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c228); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 11) === peg$c227) {
            s1 = peg$c227;
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c228); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsews();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c236) {
                s3 = peg$c236;
                peg$currPos += 9;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c237); }
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c236) {
              s0 = peg$c236;
              peg$currPos += 9;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c237); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 11) === peg$c227) {
                s0 = peg$c227;
                peg$currPos += 11;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c228); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselist_types() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetype_value();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsews2();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsetype_value();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c390(s2, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsews2();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsetype_value();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c390(s2, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c391(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseblock_values() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c387) {
        s0 = peg$c387;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c388); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseblock_listOfValues();
      }

      return s0;
    }

    function peg$parseblock_list_val() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c236) {
        s0 = peg$c236;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c227) {
          s0 = peg$c227;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c228); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 12) === peg$c392) {
            s0 = peg$c392;
            peg$currPos += 12;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c393); }
          }
        }
      }

      return s0;
    }

    function peg$parseblock_listOfValues() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseblock_list_val();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsews2();
        if (s6 !== peg$FAILED) {
          s7 = peg$parseblock_list_val();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsews2();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseblock_list_val();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c394(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesimpleType_final_values() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c387) {
        s0 = peg$c387;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c388); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsesimpleType_final_listOfValues();
      }

      return s0;
    }

    function peg$parsesimpleType_final_list_val() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c221) {
        s0 = peg$c221;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c222); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c216) {
          s0 = peg$c216;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c217); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c227) {
            s0 = peg$c227;
            peg$currPos += 11;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c228); }
          }
        }
      }

      return s0;
    }

    function peg$parsesimpleType_final_listOfValues() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parsesimpleType_final_list_val();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsews2();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsesimpleType_final_list_val();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsews2();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsesimpleType_final_list_val();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$c395(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenamespace_values() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenamespace_values_Q();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenamespace_values_A();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c326();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenamespace_values_Q() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c300;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c301); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c396) {
            s4 = peg$c396;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c397); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c398) {
              s4 = peg$c398;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c399); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsenamespace_listOfValues_Q();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c400(s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s6 = peg$c300;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c301); }
              }
              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenamespace_values_A() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c302;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c303); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c396) {
            s4 = peg$c396;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c397); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c398) {
              s4 = peg$c398;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c399); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$parsenamespace_listOfValues_A();
              if (s5 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s6 = peg$c400(s5);
                if (s6) {
                  s6 = void 0;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s6 = peg$c302;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c303); }
              }
              if (s6 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5, s6];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenamespace_list_val_Q() {
      var s0, s1, s2, s3, s4, s5;

      if (input.substr(peg$currPos, 7) === peg$c401) {
        s0 = peg$c401;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 17) === peg$c403) {
          s0 = peg$c403;
          peg$currPos += 17;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c404); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c405) {
            s3 = peg$c405;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c406); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c300;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c301); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c202); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (peg$c407.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c408); }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c407.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c408); }
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsenamespace_list_val_A() {
      var s0, s1, s2, s3, s4, s5;

      if (input.substr(peg$currPos, 7) === peg$c401) {
        s0 = peg$c401;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 17) === peg$c403) {
          s0 = peg$c403;
          peg$currPos += 17;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c404); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c405) {
            s3 = peg$c405;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c406); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c302;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c303); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c202); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (peg$c409.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c410); }
              }
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c409.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c410); }
                  }
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsenamespace_listOfValues_Q() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsenamespace_list_val_Q();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsews2();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsenamespace_list_val_Q();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsews2();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsenamespace_list_val_Q();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenamespace_listOfValues_A() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsenamespace_list_val_A();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsews2();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsenamespace_list_val_A();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsews2();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsenamespace_list_val_A();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseselectorXPath() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsepath();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s5 = peg$c411;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c412); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsepath();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 124) {
            s5 = peg$c411;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c412); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsepath();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsepath() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c413) {
        s1 = peg$c413;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestep();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c415;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c416); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsestep();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c415;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c416); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestep();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefieldXPath() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c413) {
        s2 = peg$c413;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c414); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsestep();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s6 = peg$c415;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c416); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsestep();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s6 = peg$c415;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c416); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsestep();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 64) {
              s5 = peg$c417;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c418); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsenameTest();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsestep() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c419;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsenameTest();
      }

      return s0;
    }

    function peg$parsenameTest() {
      var s0, s1, s2, s3;

      s0 = peg$parseQName();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c421;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c422); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNCName();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s2 = peg$c68;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 42) {
                s3 = peg$c421;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c422); }
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }


      // Geral ------------------------------

      // queue para invocações de funções de validação de referências na schema (refs e types) - para os elementos referenciados não terem de aparecer antes das referências
      let queue = []
      // prefixo definido na declaração da schema
      let default_prefix = null

      // função para contar o número de dígitos significativos num número
      let countDigits = num => String(num).replace(/\-|\./g, "").length
      // função para contar o número de dígitos da parte inteira de um número
      let countIntDigits = num => String(num).replace(/\-|\.\d+/g, "").length
      // função para contar o número de dígitos fracionários de um número
      let countFracDigits = num => num%1 === 0 ? 0 : String(num).replace(/\-?\d*\./, "").length
      // função para verificar se o tipo base é um tipo de números inteiros
      let isBaseInt = base => ["byte","int","integer","long","short","negativeInteger","nonNegativeInteger","nonPositiveInteger","positiveInteger"].includes(base) || base.startsWith("unsigned")

      // criar array com os nomes do tipos embutidos da XML Schema
      const built_in_types = () => {
        let types = []
        for (let p in simpleTypes) if (!("built_in_base" in simpleTypes[p])) types.push(p)
        return types
      }

      // array dos tipos embutidos da XML Schema em formato da DSL ({element, attrs, content})
      let simpleTypes = create_simpleTypes()

      // criar um objeto com todos os tipos embutidos da XML Schema, com a estrutura da DSL {element, attrs, content}
      function create_simpleTypes() {
        let obj = {}
        
        let primitive_types = ["string","boolean","decimal","float","double","duration","dateTime","time","date","gYearMonth","gYear","gMonthDay","gDay","gMonth","hexBinary","base64Binary","anyURI","QName","NOTATION"]
        
        // colocar os tipos primitivos no objeto
        for (let i = 0; i < primitive_types.length; i++) {
          let x = primitive_types[i]

          obj[x] = {content: [{
            element: "whiteSpace",
            attrs: {
              value: x == "string" ? "preserve" : "collapse",
              fixed: true
            },
            content: []
          }]}

          if (x == "string") obj[x].content[0].attrs.fixed = false
        }

        // colocar os tipo derivados no objeto
        let derivedTypes = [
          ["integer", "decimal", [["fractionDigits", 0, true]]],
          ["nonPositiveInteger", "integer", [["maxInclusive", 0, false]]],
          ["negativeInteger", "nonPositiveInteger", [["maxInclusive", -1, false]]],
          ["long", "integer", [["minInclusive", -9223372036854775808, false], ["maxInclusive", 9223372036854775807, false]]],
          ["int", "long", [["minInclusive", -2147483648, false], ["maxInclusive", 2147483647, false]]],
          ["short", "int", [["minInclusive", -32768, false], ["maxInclusive", 32767, false]]],
          ["byte", "short", [["minInclusive", -128, false], ["maxInclusive", 127, false]]],
          ["nonNegativeInteger", "integer", [["minInclusive", 0, false]]],
          ["positiveInteger", "nonNegativeInteger", [["minInclusive", 1, false]]],
          ["unsignedLong", "nonNegativeInteger", [["maxInclusive", 18446744073709551615, false]]],
          ["unsignedInt", "unsignedLong", [["maxInclusive", 4294967295, false]]],
          ["unsignedShort", "unsignedInt", [["maxInclusive", 65535, false]]],
          ["unsignedByte", "unsignedShort", [["maxInclusive", 255, false]]],
          ["normalizedString", "string", [["whiteSpace", "replace", false]]],
          ["token", "normalizedString", [["whiteSpace", "collapse", false]]],
          ["language", "token", [["pattern", "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*", false]]],
          ["Name", "token", [["pattern", "[a-zA-Z:_][-_:\.a-zA-Z0-9]*", false]]],
          ["NCName", "Name", [["pattern", "[a-zA-Z_][-_\.a-zA-Z0-9]*", false]]],
          ["ID", "NCName", []],
          ["IDREF", "NCName", []],
          ["ENTITY", "NCName", []],
          ["NMTOKEN", "token", [["pattern", "[-_:\.a-zA-Z0-9]+", false]]]
        ]
        
        derivedTypes.map(x => {
          let new_content =  x[2].map(r => {return {element: r[0], attrs: {value: r[1], fixed: r[2]}, content: []}})
          let base_content = JSON.parse(JSON.stringify(obj[x[1]].content)) // constraining facets do tipo base
          obj[x[0]] = {content: restrict_simpleType2(x[0], {type: x[1], prefix: default_prefix}, base_content, new_content)}
        })
        
        return obj
      }

      // name = nome do novo tipo, st_content = conteúdo do novo simpleType
      function restrict_simpleType(name, st_content) {
        /* if (st_content[0].element == "list") {
          let new_content = st_content.filter((x,i) => i>0)
          return {built_in_base: st_content[0].built_in_base, content: st_content[0].content, list: restrict_simpleType2("list", "list", new_content, simpleTypes)}
        } */

        let base, base_content, new_content, fst_content = st_content[0]

        if (fst_content.element == "restriction") {
          if (fst_content.content[0].element == "simpleType") {
            base = fst_content.content[0].built_in_base
            base_content = fst_content.content[0].content
            new_content = fst_content.content.filter((x,i) => i>0)
          }
          else {
            base = fst_content.attrs.base
            base_content = JSON.parse(JSON.stringify(simpleTypes[getTypeInfo(base).type].content)) // constraining facets do tipo base
            new_content = fst_content.content // constraining facets do novo tipo
          }
        }
        
        let type = getTypeInfo(base) // tipo base
        return {built_in_base: type.base, content: restrict_simpleType2(name, type, base_content, new_content)}
      }

      // name = nome do novo tipo, base = nome do tipo base, new_content = facetas do novo tipo, st = simpleTypes
      function restrict_simpleType2(name, base, base_content, new_content) {
        let base_els = base_content.map(x => x.element) // nomes das constraining facets do tipo base

        for (let i = 0; i < new_content.length; i++) {
          let new_facet = new_content[i].element // nome da faceta em questão no tipo novo
          let new_value = new_content[i].attrs.value // valor da faceta em questão no tipo novo

          // função para invocar a função auxiliar que verifica uma condição de recursividade
          let aux = arr => arr.reduce((acc,cur) => {
            for (let i = 0; i < (new_facet == "enumeration" ? new_value.length : 1); i++)
              restrict_simpleType_aux(name, `${base.prefix}:${base.type}`, cur[0], new_facet, base_els, base_content, new_facet == "enumeration" ? new_value[i] : new_value, cur[1]) && acc
          }, true)

          switch (new_facet) {
            case "totalDigits": aux([["totalDigits", "inf_eq"]]); break
            case "fractionDigits": aux([["totalDigits", "inf_eq"], ["fractionDigits", "inf_eq"], ["enumeration", "frac_enum"]]); break
            case "maxExclusive": aux([["totalDigits", "inf_dig"], ["fractionDigits", "inf_fracDig"], ["maxExclusive", "inf_eq"], 
                                      ["maxInclusive", "inf_eq"], ["minExclusive", "sup"], ["minInclusive", "sup"], ["enumeration", "include"]]); break
            case "maxInclusive":
            case "minInclusive": aux([["totalDigits", "inf_dig"], ["fractionDigits", "inf_fracDig"], ["maxExclusive", "inf"], 
                                      ["maxInclusive", "inf_eq"], ["minExclusive", "sup"], ["minInclusive", "sup_eq"], ["enumeration", "include"]]); break
            case "minExclusive": aux([["totalDigits", "inf_dig"], ["fractionDigits", "inf_fracDig"], ["maxExclusive", "inf"], 
                                      ["maxInclusive", "inf"], ["minExclusive", "sup_eq"], ["minInclusive", "sup_eq"], ["enumeration", "include"]]); break
            case "pattern": aux([["enumeration", "match_parent"]]); break
            case "enumeration": aux([["totalDigits", "inf_dig"], ["fractionDigits", "inf_fracDig"], ["maxExclusive", "inf"], 
                                     ["maxInclusive", "inf_eq"], ["minExclusive", "sup"], ["minInclusive", "sup_eq"], ["enumeration", "include"],
                                     ["pattern", "match_child"], ["length", "len_eq"], ["maxLength", "len_inf_eq"], ["minLength", "len_sup_eq"]]); break
            case "length": aux([["enumeration", "len_parent_eq"], ["length", "eq"], ["maxLength", "inf_eq"], ["minLength", "sup_eq"]]); break
            case "maxLength": aux([["enumeration", "len_parent_sup_eq"], ["maxLength", "inf_eq"], ["minLength", "sup_eq"]]); break
            case "minLength": aux([["enumeration", "len_parent_inf_eq"], ["maxLength", "inf_eq"], ["minLength", "sup_eq"]]); break
            case "whiteSpace": aux([["whiteSpace", "whiteSpace"]]); break
          }
          
          // atualizar o valor de uma faceta, depois de verificar todas as condições de recursividade
          if (base_els.includes(new_facet)) {
            let index = base_content.findIndex(x => x.element == new_facet)

            // patterns em passos de derivação diferentes são ANDed
            if (new_facet == "pattern") base_content[index].attrs.value = `^(?=${base_content[index].attrs.value})(?=${new_value}).*$`
            else base_content[index].attrs.value = new_value
          }
          else base_content.push(new_content[i])

          // função para remover uma faceta mutualmente exclusiva na nova
          let remove_mutex = (facet, mutex) => {if (new_facet == facet && base_els.includes(mutex)) base_content.splice(base_content.findIndex(x => x.element == mutex), 1) }

          remove_mutex("maxExclusive","maxInclusive")
          remove_mutex("maxInclusive","maxExclusive")
          remove_mutex("minExclusive","minInclusive")
          remove_mutex("minInclusive","minExclusive")
        }
        
        return base_content
      }

      function restrict_simpleType_aux(name, base, base_facet, new_facet, base_els, base_content, new_value, cond) {
        // tipos de mensagens de erro
        let err_str = {
          fixed: facet => `o valor para <${facet}> foi fixado a`,
          compare: (facet, comp) => `deve ser ${comp} ${comp == "=" ? "a" : "que "}o valor de <${facet}> que foi definido como`,
          length: (facet, inf_sup) => `o seu comprimento deve ser ${inf_sup}= ao valor de <${facet}> que foi definido como`,
          digits: (base_val, frac) => `o número total de dígitos${frac ? " fracionários" : ""} foi limitado a`,
          enum: () => `não pertence ao espaço de valores de enumeração do tipo base, '${base}'`,
          parent_enum: () => `nenhum dos valores do espaço de enumeração do tipo base, '${base}', obedece a essa restrição`,
          match_child: (facet) => `não obedece ao formato de <${facet}> que foi definido como`,
          ws: () => `o valor de <whiteSpace> foi definido como`
        }

        let err = (facet, base_val, new_val, err_type, err_args, end) => 
          error(`Na definição d${name !== undefined ? `e '${name}'` : "o novo simpleType"}, o valor '${new_val}' da faceta <${facet}> é inválido, porque ${err_str[err_type](...err_args)}${end ? ` '${base_val}' num dos seus tipos ancestrais` : ""}!`)

        if (base_els.includes(base_facet)) {
          // ir buscar o valor da faceta em questão ao tipo base
          let index = base_content.findIndex(x => x.element == base_facet)
          let base_attrs = base_content[index].attrs
          let base_value = base_attrs.value

          // se a faceta já existir no tipo base, verificar se é fixed lá
          if (base_facet == new_facet && base_facet != "enumeration") {
            if (base_attrs.fixed && base_value != new_value) return err(new_facet, base_value, new_value, "fixed", [new_facet], true)
          }

          let err_args = []
          switch (cond) {
            case "eq": if (!(base_value == new_value)) err_args = ["compare", [base_facet, "="], true]; break
            case "inf": if (!(base_value > new_value)) err_args = ["compare", [base_facet, "<"], true]; break
            case "inf_eq": if (!(base_value >= new_value)) err_args = ["compare", [base_facet, "<="], true]; break
            case "sup": if (!(base_value < new_value)) err_args = ["compare", [base_facet, ">"], true]; break
            case "sup_eq": if (!(base_value <= new_value)) err_args = ["compare", [base_facet, ">="], true]; break
            case "len_eq": if (!(base_value == new_value.length)) err_args = ["length", [base_facet, ""], true]; break
            case "len_inf_eq": if (!(base_value >= new_value.length)) err_args = ["length", [base_facet, "<"], true]; break
            case "len_sup_eq": if (!(base_value <= new_value.length)) err_args = ["length", [base_facet, ">"], true]; break
            case "frac_enum": if (Math.min(...base_value.map(x => countFracDigits(x))) > new_value) err_args = ["parent_enum", [], false]; break
            case "inf_dig": if (base_value < countDigits(new_value)) err_args = ["digits", [base_value, false], true]; break
            case "inf_fracDig": if (base_value < countFracDigits(new_value)) err_args = ["digits", [base_value, true], true]; break
            case "include": if (!base_value.includes(new_value)) err_args = ["enum", [], false]; break
            case "match_parent": if (!base_value.some(x => new RegExp(new_value).test(x))) err_args = ["parent_enum", [], false]; break
            case "match_child": if (!new RegExp(base_value).test(new_value)) err_args = ["match_child", [base_facet], true]; break
            case "len_parent_eq": if (!base_value.some(x => x.length == new_value)) err_args = ["parent_enum", [], false]; break
            case "len_parent_inf_eq": if (!base_value.some(x => x.length >= new_value)) err_args = ["parent_enum", [], false]; break
            case "len_parent_sup_eq": if (!base_value.some(x => x.length <= new_value)) err_args = ["parent_enum", [], false]; break
            case "whiteSpace": if ((base_value == "collapse" && base_value != new_value) || (base_value == "replace" && new_value == "preserve")) err_args = ["ws", [], true]; break
          }

          if (err_args.length > 0) return err(new_facet, base_value, new_value, ...err_args)
        }
        return true
      }

      // verificar se o elemento pai é o <schema>
      const atRoot = () => !schema_depth
      // verificar se não foi definido um prefixo para a schema
      const noSchemaPrefix = () => default_prefix === null
      // verificar se o prefixo usado foi declarado na definição da schema
      const existsPrefix = p => prefixes.includes(p) ? true : error("Este prefixo não foi declarado no início da schema!")
      // verificar se as aspas/apóstrofes são fechados consistentemente - se sim, retorna o objeto {attr,val} em que foram usadas (ou apenas true, para as invocações da declaração XML)
      const checkQM = (q1,q2,attr,val) => q1 === q2 ? (attr===null ? true : {attr,val}) : error("Deve encapsular o valor em aspas ou em apóstrofes. Não pode usar um de cada!")
      // juntar todos os atributos do elemento num só objeto
      const getAttrs = objArr => objArr === null ? {} : cleanContent(objArr).reduce(((r,c) => { r[c.attr] = c.val; return r }), {})
      // verificar se o array de atributos tem algum atributo repetido
      const check_repeatedAttrs = (arr, attrs, el_name) => (Object.keys(attrs).length == arr.length) ? attrs : error(`O elemento <${el_name}> não pode possuir atributos repetidos!`)
      // executar todas as invocações guardadas na queue para ver se são válidas
      const checkQueue = () => queue.reduce((accum, curr) => accum && queueFuncs[curr.attr](...curr.args), true)

      // copiar os atributos de um elemento referenciado para o elemento que o referencia
      function complete_refs(content, global_elems) {
        for (let i = 0; i < content.length; i++) {
          // verificar se é um <element> com "ref"
          if ("ref" in content[i].attrs) {
            // identificar o elemento global que referenceia
            let elem = global_elems.filter(x => x.attrs.name == content[i].attrs.ref)[0]
            // copiar os seus atributos e o conteúdo
            content[i].attrs = {...elem.attrs, ...content[i].attrs}
            content[i].content = elem.content
            // apagar o atributo "ref", que já não é relevante
            delete content[i].attrs.ref
          }
          // se for um elemento básico (sem "ref" nem filhos) e não tiver "type", assume-se que é string
          else if (content[i].element == "element" && !("type" in content[i].attrs) && !content[i].content.length) content[i].attrs.type = default_prefix + ":string"

          // repetir recursivamente para os elementos filho
          if (Array.isArray(content[i].content)) content[i].content = complete_refs(content[i].content, global_elems)
        }
        
        return content
      }

      // funções invocadas pela queue
      const queueFuncs = {
        // validar se o atributo "ref" está a referenciar um <element/attribute> global válido da schema ou de uma schema importada (só se valida o prefixo, neste caso)
        ref: (ref, el_name) => (ref.includes(":") || names[el_name].includes(ref)) ? true : error(`Está a tentar referenciar um elemento <${el_name}> inexistente! Só é possível referenciar elementos globais.`),
        // verificar que o tipo local que está a ser referenciado existe
        type: (type, prefix, curr_any_type, curr_type, curr_el) => {
          let error_msg = {
            BSC: "tipo embutido, simpleType ou complexType",
            BS: "tipo embutido ou simpleType",
            C: "complexType"
          }
            
          if (curr_any_type != "C" && built_in_types().includes(type)) {
            return prefix === default_prefix ? true : error(`Para especificar um dos tipos embutidos de schemas XML, tem de o prefixar com o prefixo do namespace desta schema.
                                                            ${(noSchemaPrefix() && prefix !== null) ? " Neste caso, como não declarou um prefixo para o namespace da schema, não deve prefixar o tipo também." : ""}`)
          }
          if (prefix == null || prefix == default_prefix) {
            if (!existsLocalType(type)) return error(`Tem de referenciar um ${error_msg[curr_any_type]} válido!`)
            if (!curr_el && type === curr_type) return error(`Definições circulares detetadas para o tipo '${type}'! Isto significa que o '${type}' está contido na sua própria hierarquia, o que é um erro.`)
          }
          return true
        }
      }

      // Schema ------------------------------

      // prefixos de namespaces declarados na schema
    	let prefixes = []
      // atributos da schema
      let schema_attrs = {}
      // número de elementos aninhados dentro do <schema> correntemente
      let schema_depth = 0

      // validar os atributos do elemento <schema>
      function check_schemaAttrs(arr) {
        // obrigatoriamente tem atributos (no mínimo a definição do namespace)
        if (arr.length < 1) return error("O elemento <schema> requer, no mínimo, a definição do namespace!")

        let keys = [], // array com os nomes dos atributos
            attrs = {namespaces: {}}, // objeto com os valores dos atributos
            null_namespace = "" // para guardar o URI do namespace predefinido, caso não tenha prefixo
            
        for (let i = 0; i < arr.length; i++) {
          // verificar que não há atributos repetidos (pode haver várias definições de namespaces)
          if (keys.includes(arr[i].attr) && arr[i].attr != "namespace") return error("O elemento <schema> não pode possuir atributos repetidos!")
          else {
            // guardar a chave "namespace" apenas 1x
            if (!keys.includes(arr[i].attr)) keys.push(arr[i].attr)
            // guardar o valor no objeto attrs
            if (arr[i].attr == "namespace") {
              if (arr[i].prefix === null) {
                // verificar que só há, no máximo, 1 namespace sem prefixo
                if (null_namespace.length > 0) return error("Não pode haver vários namespaces sem prefixo associado!")
                else null_namespace = arr[i].val
              }
              else {
                // verificar que não há prefixos de namespaces repetidos
                if (arr[i].prefix in attrs.namespaces) return error("Todos os prefixos de namespaces devem ser únicos!")
                else attrs.namespaces[arr[i].prefix] = arr[i].val
              }
            }
            else attrs[arr[i].attr] = arr[i].val
          }
        }

        // a definição do namespace é obrigatória
        if (!Object.keys(attrs.namespaces).length && !null_namespace.length) return error("O elemento <schema> requer a definição do namespace!")
        // verificar que a definição de um namespace e, opcionalmente, prefixo predefinidos está correta e coerente
        if (default_prefix === null && !null_namespace.length) return error("Precisa de prefixar o elemento <schema> com o prefixo do namespace predefinido!")
        if (default_prefix !== null && null_namespace.length > 0) {
          if (!(default_prefix in attrs.namespaces)) return error("Precisa de associar o prefixo do elemento <schema> a um namespace!")
        }

        // atributos com valores predefinidos
        if (!keys.includes("attributeFormDefault")) attrs.attributeFormDefault = "unqualified"
        if (!keys.includes("elementFormDefault")) attrs.elementFormDefault = "unqualified"

        schema_attrs = attrs
        return attrs
      }
      

      // <element> ------------------------------

      // nomes (únicos) dos elementos globais com esse atributo
      let names = {attribute: [], attributeGroup: [], element: [], elem_constraint: [], group: [], notation: []}
      // atributos "id" de elementos da schema - têm de ser únicos
      let ids = []
      // boleanos para saber se está a ser processado um <element> (para a função validationQueue.type), um <group> ou um <redefine>
      let curr = {element: false, group: false, redefine: false}

      // validar um elemento <element/attribute> básico - verificar que tem os atributos essenciais
      const validateLocalEl = attrs => "ref" in attrs || "name" in attrs
      // validar os atributos de um elemento <any/all/choice/sequence>
      const check_occursAttrs = (arr, el_name) => defaultOccurs(check_repeatedAttrs(arr, getAttrs(arr), el_name))
      // verificar se o novo id é único na schema
      const validateID = id => !ids.includes(id) ? true : error(`O valor do atributo 'id' deve ser único na schema! Existe mais do que um elemento na schema com o id '${id}'!`)
      // verificar se o atributo em questão está presente
      const check_requiredAttr = (attrs, el_name, attr_name) => attr_name in attrs ? attrs : error(`Um elemento <${el_name}> requer o atributo '${attr_name}'!`)
      // se for null, converte para array vazio; senão, remove os nulls do array
      const cleanContent = content => content === null ? [] : content.filter(e => e !== null)

      // validar o nome de um <element/attribute/notation> - deve ser único
      function validateName(name, el_name) {
        // verificar que são elementos globais
        if (atRoot()) {
          if (!names[el_name].includes(name)) {names[el_name].push(name); return true}
          return error(`Todos os elementos <${el_name}> ${el_name != "notation" ? "definidos globalmente " : ""}devem ter nomes únicos!`)
        }
        if (["key","keyref","unique"].includes(el_name)) {
          if (!names.elem_constraint.includes(name)) {names.elem_constraint.push(name); return true}
          return error(`Todos os elementos <key>, <keyref> e <unique> devem ter nomes únicos!`)
        }
        return true
      }
      
      // validar as tags de abertura e fecho de um elemento - prefixos e nomes de elementos coesos
      function check_elTags(el_name, prefix, close) {
        // merged é um boleano que indica se a abertura e fecho são feitos no mesmo elemento ou não
        if (!close.merged) {
          if (el_name !== close.name) return error(`Os elementos de abertura <${el_name}> e de fecho <${close.name}> devem dizer respeito ao mesmo elemento!`)
          if (prefix !== close.prefix) return error(`O prefixo do elemento de fecho do <${el_name}> tem de ser igual ao prefixo do elemento de abertura!`)
        }
        
        if (prefix !== null && prefix !== default_prefix) return error("Prefixo inválido!")
        if (prefix === null && !noSchemaPrefix()) return error("Precisa de prefixar o elemento com o prefixo do respetivo namespace!")

        return true
      }

      // validar as tags e verificar se o atributo "base" está presente
      function check_requiredBase(el_name, parent_el, prefix, attrs, close) {
        if (!("base" in attrs)) return error(`O atributo 'base' é requirido num elemento <${el_name}> (${parent_el})!`)
        return check_elTags(el_name, prefix, close) && check_repeatedNames(el_name, "attribute", close.content)
      }
      
      // verificar que um elemento <element> não tem o atributo "ref" e um dos elementos filhos mutualmente exclusivos com esse
      function check_elemMutex(attrs, content) {
        if ("ref" in attrs && content.some(x => ["simpleType","complexType","key","keyref","unique"].includes(x.element)))
          return error(`Se o atributo 'ref' está presente num elemento <element>, o seu conteúdo não pode conter nenhum elemento <simpleType>, <complexType>, <key>, <keyref> ou <unique>!`)
        return true
      }

      // verificar que um elemento <attribute> não tem um elemento filho <simpleType> e um dos atributos mutualmente exclusivos com esse
      function check_attrMutex(attrs, content) {
        let error_msg = attr => `O atributo '${attr}' só pode estar presente no elemento <attribute> quando o seu conteúdo não contém um elemento <simpleType>!`

        if (content.some(x => x.element === "simpleType")) {
          if ("type" in attrs) return error(error_msg("type"))
          if ("ref" in attrs) return error(error_msg("ref"))
        }

        return true
      }

      // verificar que um elemento <attributeGroup> não tem conteúdo se tiver o atributo "ref"
      function check_attrGroupMutex(attrs, content) {
        if (!atRoot() && content.length > 0) return error("Os elementos <attributeGroup> devem ser definidos globalmente e referenciados dentro de outros elementos!")

        if ("ref" in attrs && content.some(x => x.element != "annotation"))
          return error("Se um elemento <attributeGroup> tiver o atributo 'ref' especificado, o seu conteúdo só pode ser, no máximo, um elemento <annotation>!")
        return true
      }

      // verificar que um elemento não tem <element/attribute> locais com o mesmo nome
      function check_repeatedNames(parent, el_name, content) {
        // filtrar apenas os elementos <element/attribute> do conteúdo e ir buscar os respetivos atributos "name" (remover os atributos que não têm nome, mas sim ref)
        let names = content.filter(x => x.element == el_name).map(x => x.attrs.name).filter(x => x != undefined)

        // verificar se há nomes repetidos no array
        let duplicates = names.filter((item, index) => names.indexOf(item) !== index)
        if (duplicates.length > 0) return error(`Os elementos <${el_name}> locais de um elemento devem ter todos nomes distintos entre si! Neste caso, o elemento <${parent}> tem mais do que um <${el_name}> com o nome '${duplicates[0]}'.`)
        return true
      }

      // adicionar os valores default dos atributos "max/minOccurs"
      function defaultOccurs(attrs) {
        // os elementos dentro de um group não podem possuir estes atributos, logo não colocar por default
        if (!curr.group) {
          if (!("maxOccurs" in attrs)) attrs.maxOccurs = ("minOccurs" in attrs && attrs.minOccurs > 0) ? attrs.minOccurs : 1
          else if (attrs.maxOccurs == "unbounded") attrs.maxOccurs = ("minOccurs" in attrs ? attrs.minOccurs : 0) + 10 // se o maxOccurs for unbounded, assume-se um teto de minOccurs+10

          if (!("minOccurs" in attrs)) attrs.minOccurs = !attrs.maxOccurs ? 0 : 1
        }
        return attrs
      }

      // validar os atributos de um elemento <element>
      function check_elemAttrs(arr) {
        let attrs = check_repeatedAttrs(arr, getAttrs(arr), "element")

        // restrições relativas à profundidade dos elementos
        if (atRoot()) { // elementos da schema
          if ("ref" in attrs) return error("O atributo 'ref' é proibido num elemento <element> de schema!")
          if ("maxOccurs" in attrs) return error("O atributo 'maxOccurs' é proibido num elemento <element> de schema!")
          if ("minOccurs" in attrs) return error("O atributo 'minOccurs' é proibido num elemento <element> de schema!")
          if (!("name" in attrs)) return error("O atributo 'name' é requirido num elemento <element> de schema!")
        }
        // elementos aninhados
        else if ("final" in attrs) return error("O atributo 'final' é proibido num elemento <element> local!")

        // mensagem de erro de atributos mutuamente exclusivos
        let mutexc_error = (a1,a2) => error(`Em elementos <element>, os atributos '${a1}' e '${a2}' são mutuamente exclusivos!`)
        // atributos mutuamente exclusivos
        if ("default" in attrs && "fixed" in attrs) return mutexc_error("default","fixed")
        if ("ref" in attrs && "block" in attrs) return mutexc_error("ref","block")
        if ("ref" in attrs && "default" in attrs) return mutexc_error("ref","default")
        if ("ref" in attrs && "fixed" in attrs) return mutexc_error("ref","fixed")
        if ("ref" in attrs && "form" in attrs) return mutexc_error("ref","form")
        if ("ref" in attrs && "name" in attrs) return mutexc_error("ref","name")
        if ("ref" in attrs && "nillable" in attrs) return mutexc_error("ref","nillable")
        if ("ref" in attrs && "type" in attrs) return mutexc_error("ref","type")

        // maxOccurs não pode ser inferior a minOccurs
        if ("maxOccurs" in attrs && "minOccurs" in attrs && attrs.maxOccurs < attrs.minOccurs)
          return error("A propriedade 'maxOccurs' do elemento não pode ser inferior à 'minOccurs'!")

        // atributos com valores predefinidos
        if (!atRoot()) attrs = defaultOccurs(attrs)
        if (!("abstract" in attrs)) attrs.abstract = false
        //if (!("form" in attrs)) attrs.form = //valor do atributo elementFormDefault do elemento da schema
        if (!("nillable" in attrs)) attrs.nillable = false

        return attrs
      }

      // validar os atributos de um elemento <keyref>
      function check_keyrefAttrs(arr) {
        let attrs = check_repeatedAttrs(arr, getAttrs(arr), "keyref")

        // atributos requiridos
        if (!("name" in attrs)) return error(`No elemento <keyref> é requirido o atributo 'name'!`)
        if (!("refer" in attrs) && !("system" in attrs)) return error(`No elemento <keyref> é requirido o atributo 'refer'!`)

        return attrs
      }

      // validar os atributos de um elemento <attribute/attributeGroup>
      function check_attributeElAttrs(arr, el_name) {
        let attrs = check_repeatedAttrs(arr, getAttrs(arr), el_name)

        // restrições relativas à profundidade dos elementos
        if (atRoot()) { // elementos da schema
          if ("ref" in attrs) return error(`O atributo 'ref' é proibido num elemento <${el_name}> de schema!`)
          if (!("name" in attrs)) return error(`O atributo 'name' é requirido num elemento <${el_name}> de schema!`)
        }
        else {
          if (el_name == "attributeGroup") {
            if (!("ref" in attrs)) return error(`O atributo 'ref' é requirido num elemento <${el_name}> local!`)
            if ("name" in attrs) return error(`O atributo 'name' é proibido num elemento <${el_name}> local!`)
          }
        }

        // mensagem de erro de atributos mutuamente exclusivos
        let mutexc_error = (a1,a2) => error(`Em elementos <${el_name}>, os atributos '${a1}' e '${a2}' são mutuamente exclusivos!`)
        // atributos mutuamente exclusivos
        if ("name" in attrs && "ref" in attrs) return mutexc_error("name","ref")

        if (el_name == "attribute") {
          if ("default" in attrs && "fixed" in attrs) return mutexc_error("default","fixed")
          if ("ref" in attrs && "form" in attrs) return mutexc_error("ref","form")
          if ("ref" in attrs && "type" in attrs) return mutexc_error("ref","type")

          // atributos com valores predefinidos
          if (!("use" in attrs)) attrs.use = "optional"
        }

        return attrs
      }

      // validar os atributos de um elemento <group>
      function check_groupAttrs(arr) {
        let attrs = check_repeatedAttrs(arr, getAttrs(arr), "group")

        // restrições relativas à profundidade dos elementos
        if (atRoot()) { // elementos da schema
          if ("ref" in attrs) return error("O atributo 'ref' é proibido num elemento <group> de schema!")
          if (!("name" in attrs)) return error("O atributo 'name' é requirido num elemento <group> de schema!")
        }
        else {
          if (!("ref" in attrs)) return error("O atributo 'ref' é requirido num elemento <group> local!")
          if ("name" in attrs) return error("O atributo 'name' é proibido num elemento <group> local!")
        }

        // atributos com valores predefinidos
        return defaultOccurs(attrs)
      }

      // validar os atributos de um elemento <notation>
      function check_notationAttrs(arr) {
        let attrs = check_repeatedAttrs(arr, getAttrs(arr), "notation")

        // atributos requiridos
        if (!("name" in attrs)) return error(`No elemento <notation> é requirido o atributo 'name'!`)
        if (!("public" in attrs) && !("system" in attrs)) return error(`No elemento <notation> é requirido pelo menos um dos atributos 'public' e 'system'!`)

        return attrs
      }

      // validar o valor de atributos que sejam listas
      function validate_listOfValues(l, error_msg) {
        let arr = l.split(/[ \t\n\r]+/)
        return (new Set(arr)).size === arr.length ? true : error(error_msg)
      }

      // validar o valor do atributo "namespace" de um elemento <any/anyAttribute>, se não for ##any nem ##other
      function check_namespace(l) {
        let arr = l.split(/[ \t\n\r]+/)
        let error_msg = "O valor do atributo 'namespace' deve corresponder a ((##any | ##other) | Lista de (referência_URI | (##targetNamespace | ##local)))!"

        // verificar que não tem mais do que 1 URI
        if (arr.filter(x => x != "##local" && x != "##targetNamespace").length > 1) return error(error_msg)
        // verificar que não tem nenhum valor repetido
        return (new Set(arr)).size === arr.length ? true : error(error_msg)
      }


      // <simpleType> e <complexType> ------------------------------
      
      // número de simple/complexTypes aninhados correntemente
      let type_depth = 0
      // nome do simple/complexType a ser processado neste momento
      let current_type = null
      // nomes dos novos tipos definidos na schema - têm de ser únicos
      let local_types = {simpleType: [], complexType: [], simpleContent: []}
      // boleano para indicar se um tipo referenciado tem de corresponder a um tipo built-in ou simpleType apenas (false), ou pode ser um complexType também (true) 
      let any_type = "BSC"

      // verificar se já existe algum tipo local com este nome
      const existsLocalType = type => (any_type == "BSC" && Object.values(local_types).flat().includes(type)) || 
                                      (any_type == "BS" && local_types.simpleType.includes(type)) || 
                                      (any_type == "C" && local_types.complexType.includes(type))
      // validar um elemento <union> - verificar que referencia algum tipo
      const validateUnion = (attrs,content) => ("memberTypes" in attrs ? attrs.memberTypes.length : 0) + content.filter(e => e.element === "simpleType").length > 0 ? true : 
                                               error(`Um elemento <union> deve ter o atributo 'memberTypes' não vazio e/ou pelo menos um elemento filho <simpleType>!`)
      // validar o atributo base de um elemento <restriction> (simpleContent)
      const validateBaseSC = base => (!local_types.complexType.includes(base) || local_types.simpleContent.includes(base)) ? true :
                                      error("Num elemento <restriction> (simpleContent), para o atributo 'base' poder referenciar um <complexType>, o tipo desse elemento deve ser um tipo embutido, <simpleType> ou <simpleContent>!")


      // verificar se o nome do novo tipo já existe e adicioná-lo à lista de nomes respetiva caso seja único
      function newLocalType(name, kind) {
        if (Object.values(local_types).flat().includes(name)) return error("Já existe um simpleType/complexType com este nome nesta schema!")
        local_types[kind].push(name)
        current_type = name
        return true
      }
      
      // validar os atributos de um elemento <simpleType/complexType>
      function check_localTypeAttrs(arr, el_name) {
        let attrs = check_repeatedAttrs(arr, getAttrs(arr), el_name)
        
        // restrições relativas à profundidade dos elementos
        if (atRoot() && !("name" in attrs)) return error(`O atributo 'name' é requirido se o pai do elemento <${el_name}> for o <schema>!`)
        if (!atRoot() && !curr.redefine && "name" in attrs) return error(`O atributo 'name' é proibido se o pai do elemento <${el_name}> não for o <schema>!`)

        if (el_name == "complexType") {
          // atributos com valores predefinidos
          if (!("abstract" in attrs)) attrs.abstract = false
          if (!("mixed" in attrs)) attrs.mixed = false
        }

        return attrs
      }

      // verificar que um elemento <complexType> não tem o atributo "mixed" e um elemento filho simpleContent
      function check_complexTypeMutex(attrs, content) {
        if (attrs.mixed && content.some(x => x.element == "simpleContent"))
          return error("Se um elemento <complexType> tiver um elemento filho <simpleContent>, não é permitido o atributo 'mixed'!")

        if (content.filter(x => ["simpleContent","complexContent","group","sequence","choice","all"].includes(x.element)).length > 1)
          return error('Um elemento <complexType> só pode conter apenas um dos seguintes elementos: <simpleContent>, <complexContent>, <group>, <sequence>, <choice> ou <all>!')
        
        if ("name" in attrs && content.some(x => x.element == "simpleContent")) local_types.simpleContent.push(attrs.name)
        return true
      }

      // verificar que o filho de um <group> não tem os atributos 'max/minOccurs'
      function check_groupContent(content) {
        if (!atRoot() && content.length > 0) return error("Os elementos <group> devem ser definidos globalmente e referenciados dentro de outros elementos!")

        if (content.some(x => "maxOccurs" in x.attrs || "minOccurs" in x.attrs))
          return error(`O elemento filho de um <group> não podem possuir os atributos 'maxOccurs' ou 'minOccurs'! Só o elemento <group> em si.`)
        return true
      }

      // validar o tipo de um elemento de derivação - tem de ter ou o atributo de referência ou um elemento filho <simpleType>
      function check_derivingType(elem, attr, attrs, content) {
        if (attr in attrs && content.some(x => x.element === "simpleType"))
          return error(`A utilização do elemento filho <simpleType> e do atributo '${attr}' é mutualmente exclusiva no elemento <${elem}>!`)
        if (!(attr in attrs) && !content.filter(x => x.element == "simpleType").length)
          return error(`Um elemento <${elem}> deve ter o atributo '${attr}' ou um elemento filho <simpleType> para indicar o tipo a derivar!`)
        return true
      }

      // verificar que o nome do elemento de derivação, os atributos e o valor batem todos certo
      // nesta função, só se verifica o espaço léxico do atributo "value" dos elementos <totalDigits>, <fractionDigits>, <length>, <minLength>, <maxLength>, <whiteSpace> e <pattern>
      // para verificar os restantes elementos, é preciso o tipo base, faz-se mais à frente
      function check_constrFacetAttrs(name, arr) {
        let attrs = check_repeatedAttrs(arr, getAttrs(arr), name)

        if ("value" in attrs) {
          if (name == "whiteSpace") {
            if (!["preserve","replace","collapse"].includes(attrs.value)) return error(`O valor da faceta <whiteSpace> deve ser um dos seguintes: {preserve, replace, collapse}!`)
          }
          else if (name == "totalDigits") {
            if (!/^\+?[1-9]\d*$/.test(attrs.value)) return error(`O valor da faceta 'totalDigits' deve ser um inteiro positivo!`)
            attrs.value = parseInt(attrs.value)
          } 
          else if (["fractionDigits","length","minLength","maxLength"].includes(name)) {
            if (!/^\+?\d+$/.test(attrs.value)) return error(`O valor da faceta <${name}> deve ser um inteiro não negativo!`)
            attrs.value = parseInt(attrs.value)
          }
        }

        // restrições relativas à existência dos atributos
        if (!("value" in attrs)) return error(`No elemento <${name}> é requirido o atributo 'value'!`)
        if (name == "pattern" || name == "enumeration") {
          if ("fixed" in attrs) return error(`O elemento <${name}> não aceita o atributo 'fixed'!`)
        }
        else if (!("fixed" in attrs)) attrs.fixed = false

        return attrs
      }

      // determinar o nome e prefixo de schema do tipo em questão e o nome da sua base embutida
      /* operacional apenas para tipos da schema local */
      function getTypeInfo(type) {
        let builtin_types = built_in_types()
        let base = null // nome do tipo embutido em questão ou em qual é baseado o tipo atual
        let prefix = null

        if (type.includes(':')) {
          let split = type.split(':')
          type = split[1] // remover o prefixo do nome do tipo
          prefix = split[0]
        }
        // tipo embutido ou local desta schema
        else prefix = default_prefix

        // é um tipo da schema local, logo se não for embutido, é possível encontrar a sua base embutida na estrutura simpleTypes
        if (prefix == default_prefix) base = builtin_types.includes(type) ? type : simpleTypes[type].built_in_base

        return {type, base, prefix}
      }

      // verificar se os valores especificados nas constraining facets pertencem ao espaço léxico do tipo em que se baseiam
      // esta função só verifica o espaço léxico do atributo "value" dos elementos <minExclusive>, <minInclusive>, <maxExclusive>, <maxInclusive> e <enumeration>
      // os restantes não dependem do tipo base e já foram verificados antes
      function check_constrFacetBase(base, type, content) {
        // criar um array com os nomes de todos os constraining facets do tipo base
        let content_els = content.map(x => x.element)
        if (content_els[0] == "simpleType") content_els.shift()

        // criar array com o nome dos constraining facets válidos para o tipo em questão
        let facets = []

        switch (type.base) {
          case "anyURI": case "base64Binary": case "ENTITY": case "hexBinary": case "ID": case "IDREF": case "language": case "Name": case "NCName": 
          case "NMTOKEN": case "normalizedString": case "NOTATION": case "QName": case "string": case "token":
            facets = ["enumeration","length","maxLength","minLength","pattern"]; break

          case "boolean": facets = ["pattern"]; break

          case "byte": case "decimal": case "int": case "integer": case "long": case "negativeInteger": case "nonNegativeInteger": case "nonPositiveInteger":
          case "positiveInteger": case "short": case "unsignedByte": case "unsignedInt": case "unsignedLong": case "unsignedShort":
            facets = ["enumeration","fractionDigits","maxExclusive","maxInclusive","minExclusive","minInclusive","pattern","totalDigits"]; break

          case "date": case "dateTime": case "double": case "duration": case "float": case "gDay": case "gMonth": case "gMonthDay": case "gYear": case "gYearMonth": case "time":
          facets = ["enumeration","maxExclusive","maxInclusive","minExclusive","minInclusive","pattern"]; break

          case "ENTITIES": case "IDREFS": case "NMTOKENS": 
            facets = ["enumeration","length","maxLength","minLength"]; break
        }

        // o elemento <whiteSpace> pode aparecer em qualquer tipo base
        facets.push("whiteSpace")

        // verificar se facets possui todos os elementos de content_els para ver se há algum constraining facet inválido no tipo em questão
        if (!content_els.every(v => facets.includes(v)))
          return error(`O tipo '${type.type}' só permite os elementos de restrição <${facets.join(">, <")}>!`)

        // verificar se o atributo "value" pertence ao espaço léxico do tipo base
        for (let i = 0; i < content.length; i++) {
          if (["minExclusive","minInclusive","maxExclusive","maxInclusive","enumeration"].includes(content[i].element)) 
            content[i].attrs.value = check_constrFacetBase_aux(base, type.base, content[i].attrs.value)
        }
        
        return content
      }

      // verificar se o valor pertence ao espaço léxico do tipo em que se baseia (por regex)
      // base_name tem o prefixo para printar no erro, base_type não
      function check_constrFacetBase_aux(base_name, base_type, value) {
        let error_msg = `'${value}' não é um valor válido para o tipo '${base_name}'!`

        switch (base_type) {
          case "boolean":
            if (value === "true") value = true
            else if (value === "false") value = false
            else return error(error_msg); break
          case "byte": case "int": case "integer": case "long": case "short":
          case "unsignedByte": case "unsignedInt": case "unsignedLong": case "unsignedShort":
            if (!/^(\+|\-)?\d+$/.test(value)) return error(error_msg)
            value = parseInt(value)

            let min, max
            if (base_type == "byte") {min = -128; max = 127}
            if (base_type == "short") {min = -32768; max = 32767}
            if (base_type == "int") {min = -2147483648; max = 2147483647}
            if (base_type == "long") {min = -9223372036854775808; max = 9223372036854775807}
            if (base_type == "unsignedByte") {min = 0; max = 255}
            if (base_type == "unsignedShort") {min = 0; max = 65535}
            if (base_type == "unsignedInt") {min = 0; max = 4294967295}
            if (base_type == "unsignedLong") {min = 0; max = 18446744073709551615}

            if (value === NaN || (base_type != "integer" && !(value >= min && value <= max))) return error(error_msg); break
          case "date":
            if (!/^-?[0-9]{4,5}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "dateTime":
            if (!/^-?[0-9]{4,5}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3])(:([0-5][0-9])){2}(\.\d+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "decimal":
            if (!/^(\+|-)?(\.\d+|\d+(\.\d+)?)$/.test(value)) return error(error_msg)
            value = parseFloat(value); break
          case "double":
          case "float":
            if (!/^((\+|-)?((\.\d+|\d+(\.\d+)?)([eE](\+|-)?\d+)?)|-?INF|NaN)$/.test(value)) return error(error_msg)
            value = base_type == "double" ? parseDouble(value) : parseFloat(value); break
          case "duration":
            if (!/^-?P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(((\d+)(\.\d+)?|(\.\d+))S)?)?$/.test(value)) return error(error_msg); break
          case "ENTITIES": case "IDREFS":
            if (!/^([a-zA-Z_]|[^\x00-\x7F])([a-zA-Z0-9\.\-_]|[^\x00-\x7F])*([ \t\n\r]+([a-zA-Z_]|[^\x00-\x7F])([a-zA-Z0-9\.\-_]|[^\x00-\x7F])*)*$/.test(value)) return error(error_msg); break
          case "ENTITY": case "ID": case "IDREF": case "NCName":
            if (!/^([a-zA-Z_]|[^\x00-\x7F])([a-zA-Z0-9\.\-_]|[^\x00-\x7F])*$/.test(value)) return error(error_msg); break
          case "gDay":
            if (!/^\-{3}(0[1-9]|[12][0-9]|3[01])(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "gMonth":
            if (!/^\-{2}(0[1-9]|1[0-2])(\-{2})?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "gMonthDay":
            if (!/^\-{2}(0[1-9]|1[0-2])\-(0[1-9]|[12][0-9]|3[01])(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "gYear":
            if (!/^\-?\d{4,5}(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "gYearMonth":
            if (!/^\-?\d{4,5}\-(0[1-9]|1[0-2])(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "language":
            if (!/^([a-zA-Z]{2}|[iI]\-[a-zA-Z]+|[xX]\-[a-zA-Z]{1,8})(\-[a-zA-Z]{1,8})*$/.test(value)) return error(error_msg); break
          case "Name":
            if (!/^([a-zA-Z_:]|[^\x00-\x7F])([a-zA-Z0-9\.:\-_]|[^\x00-\x7F])*$/.test(value)) return error(error_msg); break
          case "negativeInteger":
            if (!/^-\d+$/.test(value)) return error(error_msg)
            value = parseInt(value)
            if (value === NaN || !(value <= -1)) return error(error_msg); break
          case "NMTOKEN":
            if (!/^([a-zA-Z0-9\.:\-_]|[^\x00-\x7F])+$/.test(value)) return error(error_msg); break
          case "NMTOKENS":
            if (!/^([a-zA-Z0-9\.:\-_]|[^\x00-\x7F])+([ \t\n\r]+([a-zA-Z0-9\.:\-_]|[^\x00-\x7F])+)*$/.test(value)) return error(error_msg); break
          case "nonNegativeInteger":
            if (!/^\+?\d+$/.test(value)) return error(error_msg)
            value = parseInt(value)
            if (value === NaN || !(value >= 0)) return error(error_msg); break
          case "nonPositiveInteger":
            if (!/^0+|\-\d+$/.test(value)) return error(error_msg)
            value = parseInt(value)
            if (value === NaN || !(value <= 0)) return error(error_msg); break
          case "positiveInteger":
            if (!/^\+?\d+$/.test(value)) return error(error_msg)
            value = parseInt(value)
            if (value === NaN || !(value >= 1)) return error(error_msg); break
          case "normalizedString":
            value = value.trim().replace(/[\t\n\r]/g," "); break
          case "NOTATION":
          case "QName":
            if (!/^(([a-zA-Z_]|[^\x00-\x7F])([a-zA-Z0-9\.\-_]|[^\x00-\x7F])*:)?([a-zA-Z_]|[^\x00-\x7F])([a-zA-Z0-9\.\-_]|[^\x00-\x7F])*$/.test(value)) return error(error_msg)
            let split = value.split(":")
            if (split.length == 2 && !existsPrefix(split[0])) return error(error_msg); break
          case "time":
            if (!/^([01][0-9]|2[0-3])(:([0-5][0-9])){2}(\.\d+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))?$/.test(value)) return error(error_msg); break
          case "token":
            value = value.trim().replace(/[\t\n\r]/g," ").replace(/ +/g," "); break
        }

        return value
      }

      // contar o número de casas decimais de um float
      function precision(a) {
        if (!isFinite(a)) return 0
        var e = 1, p = 0
        while (Math.round(a*e) / e !== a) { e *= 10; p++ }
        return p
      }

      // verificar se 2 strings são adjacentes em termos ASCII
      function adjacentASCII(str1, str2) {
        let len1 = str1.length, len2 = str2.length
        
        for (let i = 0; i < Math.max(len1, len2); i++) {
          if (i == len1 || i == len2) return false
        
          let dif = Math.abs(str1[i].charCodeAt(0) - str2[i].charCodeAt(0))
          if (dif != 0) {
            if (dif == 1 && i == len1-1 && i == len2-1) return true
            return false
          }
        }
      }
      
      // calcular o número de milisegundos correspondente a uma duration
      function durationToMS(d, offset) {
        let parts = []
        d = d.substring(1).split("T")
        if (d.length == 1) d.push("")

        let getParts = (chars, str) => {
          for (let i = 0; i < chars.length; i++) {
            if (!str.includes(chars[i])) {
              parts.push(0)
              if (chars[i] == "S") parts.push(0)
            }
            else {
              let split = str.split(chars[i])
              str = split[1]

              if (chars[i] == "S") {
                let s = split[0].split(".")
                if (s.length == 1) s.push("0")
                if (!s[0].length) s[0] = "0"
                s.map(x => parts.push(parseInt(x)))
              }
              else parts.push(parseInt(split[0]))
            }
          }
        }
        
        getParts(["Y","M","D"], d[0])
        getParts(["H","M","S"], d[1])

        let ms = 0, scale = 1, ratio = [12, 30, 24, 60, 60, 1000, 1]
        for (let i = parts.length-1; i >= 0; i--) {
          scale *= ratio[i]
          ms += parts[i] * scale
        }
        return ms
      }

      // validar o espaço léxico dos restraining facets que ainda faltam e verificar todas as restrições entre os facets dentro do mesmo elemento
      function check_restrictionST_facets(el_name, base, content) {
        let type = getTypeInfo(base)
        
        // verificar se os valores especificados nas constraining facets pertencem ao espaço léxico do tipo em que se baseiam
        content = check_constrFacetBase(base, type, content)

        let f = {pattern: [], enumeration: []} // objeto com os pares chave-valor
            
        for (let i = 0; i < content.length; i++) {
          let key = content[i].element,
              value = content[i].attrs.value
          
          // só os atributos "pattern" e "enumeration" é que podem aparecer várias vezes
          if (key == "pattern" || key == "enumeration") f[key].push(value)
          else {
            if (key in f) return error(`O elemento '${key}' só pode ser definido uma vez em cada elemento <${el_name}>!`)
            else f[key] = value
          }
        }

        // se não houver elementos "pattern" ou "enumeration", apagar essas chaves do objeto
        if (!f.enumeration.length) delete f.enumeration
        if (!f.pattern.length) delete f.pattern
        else f.pattern = f.pattern.map(x => '^('+x+')$').join("|") // se houver vários patterns no mesmo passo de derivação, são ORed juntos
        
        let err1 = (a1,a2) => error(`As facetas <${a1}> e <${a2}> são mutuamente exclusivas no mesmo passo de derivação!`)
        let err2 = (a1,a2,eq,int,offset) => error(`${int ? "Como o tipo base diz respeito a números inteiros, o" : "O"} valor da faceta <${a1}> deve ser <${eq} ao da <${a2}>${offset}!`)
        let err3 = (el,val,lim,comp) => error(`O valor '${val}' da faceta <enumeration> é ${comp} a ${lim}, o que contradiz a faceta <${el}>!`)
        let err4 = (a1,a2,dig,val) => error(`O valor '${val}' da faceta <${a1}> só permite valores com mais de ${dig} dígitos, o que contradiz a faceta <${a2}>!`)
        let err5 = (el,dig,val,frac) => error(`O valor '${val}' da faceta <enumeration> tem mais do que ${dig} dígitos${frac ? " fracionários" : ""}, o que contradiz a faceta <${el}>!`)
        let err6 = (val) => error(`O valor '${val}' da faceta <enumeration> não obedece à expressão regular do(s) elemento(s) <pattern> no mesmo passo de derivação!`)
        let err7 = (el,val,len,comp) => error(`O valor '${val}' da faceta <enumeration> não tem comprimento ${comp} ${len}, o que contradiz a faceta <${el}>!`)
        let err8 = (el) => error(`É um erro o tipo base não ter a faceta <${el}> se a restrição atual o tem, e a restrição atual ou o tipo base têm a faceta <length>!`)
        let err9 = (el,base,val) => error(`O valor da faceta <${el}> para o tipo base '${base}' deve ser ${val}, senão o espaço de valores válidos é vazio!`)

        let has = facet => facet in f
     
        // atributos mutuamente exclusivos
        if (has("maxInclusive") && has("maxExclusive")) return err1("maxInclusive", "maxExclusive")
        if (has("minInclusive") && has("minExclusive")) return err1("minInclusive", "minExclusive")
        if (has("length") && has("maxLength")) return err8("maxLength")
        if (has("length") && has("minLength")) return err8("minLength")

        // restrições relativas a colisões entre os valores dos constraining facets
        if (has("enumeration")) {
          for (let i = 0; i < f.enumeration.length; i++) {
            if (has("totalDigits") && countDigits(f.enumeration[i]) > f.totalDigits) return err5("totalDigits", f.totalDigits, f.enumeration[i], false)
            if (has("fractionDigits") && countFracDigits(f.enumeration[i]) > f.fractionDigits) return err5("fractionDigits", f.fractionDigits, f.enumeration[i], true)
            if (has("maxExclusive") && f.enumeration[i] >= f.maxExclusive) return err3("maxExclusive", f.enumeration[i], f.maxExclusive, ">=")
            if (has("maxInclusive") && f.enumeration[i] > f.maxInclusive) return err3("maxInclusive", f.enumeration[i], f.maxInclusive, ">")
            if (has("minExclusive") && f.enumeration[i] <= f.minExclusive) return err3("minExclusive", f.enumeration[i], f.minExclusive, "<=")
            if (has("minInclusive") && f.enumeration[i] < f.minInclusive) return err3("minInclusive", f.enumeration[i], f.minInclusive, "<")
            if (has("pattern") && !new RegExp(f.pattern).test(f.enumeration[i])) return err6(f.enumeration[i])
            if (has("length") && f.enumeration[i].length != f.length) return err7("length", f.enumeration[i], f.length, "=")
            if (has("maxLength") && f.enumeration[i].length > f.maxLength) return err7("maxLength", f.enumeration[i], f.maxLength, "<=")
            if (has("minLength") && f.enumeration[i].length < f.minLength) return err7("minLength", f.enumeration[i], f.minLength, ">=")
          }
        }
        if (has("totalDigits")) {
          if (has("fractionDigits") && f.fractionDigits > f.totalDigits) return err2("fractionDigits", "totalDigits", "=", false, "")
          if (has("maxExclusive") && f.maxExclusive < 0) {
            if (countIntDigits(f.maxExclusive) > f.totalDigits) return err4("maxExclusive", "totalDigits", f.totalDigits, f.maxExclusive)
            if (isBaseInt(type.type) && f.maxExclusive == parseInt(`-${'9'.repeat(f.totalDigits)}`)) return err4("maxExclusive", "totalDigits", f.totalDigits, f.maxExclusive)
          }
          if (has("minExclusive") && f.minExclusive > 0) {
            if (countIntDigits(f.minExclusive) > f.totalDigits) return err4("minExclusive", "totalDigits", f.totalDigits, f.minExclusive)
            if (isBaseInt(type.type) && f.minExclusive == parseInt('9'.repeat(f.totalDigits))) return err4("minExclusive", "totalDigits", f.totalDigits, f.minExclusive)
          }
          if (has("maxInclusive") && f.maxInclusive < 0 && countIntDigits(f.maxInclusive) > f.totalDigits) return err4("maxInclusive", "totalDigits", f.totalDigits, f.maxInclusive)
          if (has("minInclusive") && f.minInclusive > 0 && countIntDigits(f.minInclusive) > f.totalDigits) return err4("minInclusive", "totalDigits", f.totalDigits, f.minInclusive)
        }
        if (has("maxExclusive")) {
          if (has("minInclusive") && f.minInclusive >= f.maxExclusive) return err2("minInclusive", "maxExclusive", "=", false, "")
          if (has("minExclusive")) {
            if (isBaseInt(type.type) && f.minExclusive >= f.maxExclusive-1) return err2("minExclusive", "maxExclusive", "", true, " - 1")
            else {
              let regex = null

              if (type.type == "date") regex = /^-?[0-9]{4,5}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])/
              if (type.type == "dateTime") regex = /^-?[0-9]{4,5}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3])(:([0-5][0-9])){2}(\.\d+)?/
              if (type.type == "time") regex = /^([01][0-9]|2[0-3])(:([0-5][0-9])){2}(\.\d+)?/
              if (type.type == "gYear") regex = /^\-?\d+/
              if (type.type == "gYearMonth") regex = /^\-?\d{4,5}\-(0[1-9]|1[0-2])/
              if (type.type == "gDay") regex = /^\-{3}(0[1-9]|[12][0-9]|3[01])/
              if (type.type == "gMonth") regex = /^\-{2}(0[1-9]|1[0-2])/
              if (type.type == "gMonthDay") regex = /^\-{2}(0[1-9]|1[0-2])\-(0[1-9]|[12][0-9]|3[01])/
              
              if (type.type == "duration") {
                if (durationToMS(f.minExclusive) >= durationToMS(f.maxExclusive)-1) return err2("minExclusive", "maxExclusive", "=", false, " - 1")
              }
              else if (f.minExclusive >= f.maxExclusive) {
                if (regex !== null) return err2("minExclusive", "maxExclusive", "=", false, " - 1")
                return err2("minExclusive", "maxExclusive", "", false, "")
              }
              else if (regex !== null && adjacentASCII(f.minExclusive.match(regex)[0], f.maxExclusive.match(regex)[0])) return err2("minExclusive", "maxExclusive", "=", false, " - 1")
            }
          }
        }
        if (has("maxInclusive")) {
          if (has("minExclusive") && f.minExclusive >= f.maxInclusive) return err2("minExclusive", "maxInclusive", "", false, "")
          if (has("minInclusive") && f.minInclusive > f.maxInclusive) return err2("minInclusive", "maxInclusive", "=", false, "")
        }
        if (has("maxLength")) {
          if (has("minLength") && f.minLength > f.maxLength) return err2("minLength", "maxLength", "=", false, "")
        }

        // restrições relativas aos intervalos de valores válidos do tipo base em questão
        if (type.type == "gDay") {
          if (has("maxExclusive") && f.maxExclusive.substring(0,5) == "---01") return err9("maxExclusive", "gDay", "> '01'")
          if (has("minExclusive") && f.minExclusive.substring(0,5) == "---31") return err9("minExclusive", "gDay", "< '31'")
        }
        if (type.type == "gMonth") {
          if (has("maxExclusive") && f.maxExclusive.substring(0,4) == "--01") return err9("maxExclusive", "gMonth", "> '01'")
          if (has("minExclusive") && f.minExclusive.substring(0,4) == "--12") return err9("minExclusive", "gMonth", "< '12'")
        }
        if (type.type == "gMonthDay") {
          if (has("maxExclusive") && f.maxExclusive.substring(0,7) == "--01-01") return err9("maxExclusive", "gMonthDay", "> '01/01'")
          if (has("minExclusive") && f.minExclusive.substring(0,7) == "--12-31") return err9("minExclusive", "gMonthDay", "< '12/31'")
        }
        if (type.type == "duration" && has("maxExclusive")) {
          let max = durationToMS(f.maxExclusive)
          if (!max) return err9("maxExclusive", "duration", "> 0")
        }
        
        // se houver enumerações ou patterns, juntar todos os seus valores numa só faceta
        content = content.filter(x => x.element != "enumeration" && x.element != "pattern")
        if (has("enumeration")) content.push({element: "enumeration", attrs: {value: f.enumeration}, content: []})
        if (has("pattern")) content.push({element: "pattern", attrs: {value: f.pattern}, content: []})
        
        return content
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
